#+TITLE: Configuration layers

* 配置层                              :TOC_4_gh:noexport:
 - [[#介绍][介绍]]
 - [[#术语][术语]]
 - [[#emacs-加载过程][Emacs 加载过程]]
   - [[#emacs-lisp-文件][Emacs Lisp 文件]]
     - [[#加载文件][加载文件]]
   - [[#features][Features]]
     - [[#加载路径][加载路径]]
   - [[#自动加载][自动加载]]
   - [[#eval-after-load][Eval after load]]
   - [[#use-package][Use-package]]
 - [[#层的剖析][层的剖析]]
   - [[#layersel][layers.el]]
   - [[#packagesel][packages.el]]
   - [[#funcsel][funcs.el]]
   - [[#configel][config.el]]
   - [[#keybindingsel][keybindings.el]]
 - [[#spacemacs-加载过程][Spacemacs 加载过程]]
 - [[#案例研究自动补全][案例研究：自动补全]]
 - [[#层提示和技巧][层提示和技巧]]
   - [[#交叉依赖][交叉依赖]]
   - [[#use-package-1][Use-package]]
   - [[#use-package-钩子][Use-package 钩子]]
   - [[#最佳做法][最佳做法]]
     - [[#包所有权][包所有权]]
     - [[#本地化您的配置][本地化您的配置]]
     - [[#顺序加载][顺序加载]]
     - [[#不要使用-require][不要使用 require]]
     - [[#自动加载一切][自动加载一切]]
 - [[#how-do-i--idiomatically][How do I ... idiomatically?]]
   - [[#为主模式设置自动补全][为主模式设置自动补全]]

* 介绍
本文档旨在作为有兴趣撰写其第一个配置层的用户的教程，无论是私人使用还是贡献上游。它应该有助于清除有关层如何工作以及 Spacemacs（和 Emacs）如何加载包的一些困惑。

* 术语
Layers and packages. What gives?

- 包 :: 一组集合在一起的 Emacs Lisp 文件，提供了一些功能。软件包可能在软件包存储库中可用，例如 ELPA 或 MELPA 或第三方服务提供商（例如 github），或者甚至本地在磁盘上。
- 层 :: 可以在 Spacemacs 中启用（或禁用）的收集的配置单元。层通常汇集一个或多个包，以及通常使彼此和 Spacemacs 相互匹配所需的胶水配置代码。

在写一个层之前，考虑你想要实现的内容是很有帮助的。有没有提供你想要的功能的软件包，您想将其集成到 Spacemacs？如果是的话，你应该写一个层。您是否试图实施对 Emacs 社区有用的新功能？在这种情况下，请考虑首先编写包是否合适，然后再使用一个使用包的层。

* Emacs 加载过程
要了解如何最好地实现一个层，我们必须研究 Emacs 如何加载代码。

** Emacs Lisp 文件
Emacs Lisp 文件包含可以评估的代码。评估时，该文件中定义的函数，宏和模式可用于当前的 Emacs 会话。此后，这将被称为/加载/文件。

一个主要的问题是确保所有正确的文件按正确的顺序被加载。另一个问题是确保不会立即加载太多的文件。这导致启动时间太长。相反，我们希望确保仅根据需要加载文件，而不是一次加载文件。

这在 Emacs 中如何完成，在 Spacemacs 中如何完成？

*** 加载文件
加载文件最简单的方法是调用 =load-file=.

#+begin_src emacs-lisp
(load-file "~/elisp/foo.el")
#+end_src

这是原始的。该路径必须是精确的，并且不必在 Emacs 加载路径中（稍后将介绍）。它不会查找字节编译的 =.elc= 文件。它会简单地加载你所告诉它的。

** Features
加载您需要的更好方法是使用 /features/ 。feature 是通常与其所在文件具有相同名称的符号。假设您在名为 =my-feature.el= 的文件中有以下内容。

#+begin_src emacs-lisp
;; Your code goes here ...

(provide 'my-feature)
#+end_src

要使 Emacs 加载此文件，请像这样调用 =require= ：

#+begin_src emacs-lisp
(require 'my-feature)
#+end_src

这将检查 feature =my-feature= 是否已加载。如果没有，它会查找一个名为 =my-feature.el= ， =my-feature.elc= 的文件或其他类似的文件。如果它找到这样的文件，将加载它。当对 =provide= 的调用进行评估时，该功能将添加到已加载 feature 的列表中，以便后续的对 =require= 的调用将不起作用。

如果没有找到这样的文件，这将导致错误。

文件 =my-feature.el= 可能很好地包含其他对 =require= 的调用，实际上，这是确保在代码运行之前加载依赖关系的常用方法。

软件包作者应该使用这种技术来确保在代码运行之前加载依赖项。

*** 加载路径
当使用 =require= 加载时，Emacs 在其 /加载路径/ 中查找文件。 这只是可以找到 elisp 文件的路径列表，您可以通过 Spacemacs 中的 ~SPC h d v load-path~ 进行检查。 要添加到加载路径，只需推送到此列表，例如：

#+begin_src emacs-lisp
(push "/some/path/" load-path)
#+end_src

** 自动加载
调用 =require= 只不过是调用 =load-file= 的一种好的方式。它解决了确保文件以正确的顺序加载的问题，并且在某种程度上解决了在哪里找到磁盘上的文件的问题，但是在启动时一长串对 =require= 的调用仍然会导致 Emacs 花很长时间加载。

Emacs 使用自动加载来解决这个问题。当函数注册为自动加载时，提供“空”定义。当调用该函数时，提供函数的文件将立即加载（以及其所有必需的 feature）。最后，“空”函数用实际的那个代替，并被正常调用。首次调用该函数时，最终用户将看到轻微的延迟，而对该函数的后续调用（或作为相同过程的一部分加载的任何其他函数）将会像正常一样快速。

要将功能注册为自动加载，我们调用 =autoload= ：

#+begin_src emacs-lisp
(autoload 'some-function "some-file")
#+end_src

这指示 Emacs，只要调用 =某个函数= ，首先加载 =some-file.el= ，然后继续。

评估上述代码后，可以尝试通过执行 ~SPC h d f some-function~ 检查 =某些函数= 。它会说这是一个自动加载的函数，直到它被加载，没有其他被知道。对 =autoload= 的调用可以可选地包括更多的信息，例如文档字符串，该函数是否可以交互式调用，等等。这不需要首先实际加载文件，就可以向最终用户提供更多信息。

打开你的 =elpa= 目录，去 =helm= （目录）看看文件 =helm-autoloads.el= 。这为 Helm 中的所有文件提供了所有的自动加载。但是，这个文件不是用手写的。相反，它是由 Helm 源代码中的“魔术”注释自动生成的。他们看起来像这样：

#+begin_src emacs-lisp
;;;###autoload
(defun my-function ()
  ;; Source code...
  )
#+end_src

魔术注释 =;;;###autoload= 指示 Emacs 应该自动加载以下定义。这将自动生成适当的 =autoload= 调用。

可以自动加载的东西通常涉及任何“可定义的”，例如函数、宏、主模式或次模式、组、类等。

魔术注释也适用于其他的东西，例如变量定义（ =defvar= ），但是在这种情况下，定义只是逐字复制到自动加载文件中。例如，该代码将在启动时加载 Helm，很久以前您的文件实际上被评估，这可能不是打算要做的：

#+begin_src emacs-lisp
;;;###autoload
(require 'helm)
#+end_src

作者的责任是确保他们的包可以适当地自动加载，大多数包都很好地做到了这一点。

Spacemacs 充分利用自动加载功能。在 Spacemacs 里几乎所有东西都在需要时加载，而不是马上加载。

** Eval after load
通常，我们需要在加载包后配置它们。我们可能想设置一些变量或调用一些函数。有了 =require= 这是小事，因为它立即加载，但有自动加载它可能是棘手的，因为配置代码也必须推迟（加载）。

为了这个目的，Emacs 提供了 =with-eval-after-load= 。它可以像这样使用：

#+begin_src emacs-lisp
(with-eval-after-load 'helm
     ;; Code
     )
#+end_src

这将安排在 Helm 加载后（使用 =require= 或 autoload）执行相关代码，或者如果 Helm 已经加载，则代码将立即执行。

由于 =with-eval-after-load= 是一个宏而不是一个函数，它的参数不必被引用。

** Use-package
对于正在尝试将高效 Emacs 配置放在一起的 /最终用户/ ，有一个非常有用的 /软件包/ ，名为 =use-package= ，它提供了一个 /也/ 被称为 =use-package= 的宏，可以很好地简化整个加载包的过程。

建议有想写层的作者查看 =use-package= [[https://github.com/jwiegley/use-package][文档]] 。一些例子如下。

#+begin_src emacs-lisp
(use-package helm)
#+end_src

这简单地加载 Helm。它基本上相当于 =(require 'helm)= 。

#+begin_src emacs-lisp
(use-package helm
  :defer t)
#+end_src

这推迟使用自动加载设施和由 Helm 源代码提供的自动加载命令来进行的 Helm 加载。事实上，这是一个空操作。

#+begin_src emacs-lisp
(use-package helm
  :defer t
  :init
  ;; Code to execute before Helm is loaded
  :config
  ;; Code to execute after Helm is loaded
  )
#+end_src

此形式包括在 Helm 加载之前和之后执行的代码。 =:init= 部分可以立即执行，但是由于 Helm 被延迟，所以如果有 =:config= 部分，在加载之后才会执行。它基本上等同于简单地运行 =:init= 块，然后在 =with-eval-after-load= 中添加 =:config= 块。

#+begin_src emacs-lisp
(use-package helm
  :commands (helm-find-files helm-M-x))
#+end_src

如果发现包作者已经懈怠，这将为其他命令创建自动加载引用。

#+begin_src emacs-lisp
(use-package ruby-mode
  :mode "\\.rb\\'")
#+end_src

对于提供主模式的软件包，可以使用 =:mode= 关键字将文件扩展名与该模式相关联。这将为 =auto-mode-alist= 添加一个条目，并为 =ruby-mode= 添加一个自动加载。通常这不是必需的，因为 =ruby-mode= 应该已经可以自动加载，并且包应该将 Ruby 文件与自己相关联。

Use-package 支持很多有用的关键字。看看[[https://github.com/jwiegley/use-package][ 文档]] 了解更多。

* 层的剖析
:PROPERTIES:
:CUSTOM_ID: anatomy-of-a-layer
:END:
一个层就是 Spacemacs 层搜索路径中的一个文件夹，通常包含这些文件（按加载顺序列出）。

- =layers.el= :: 声明额外的层
- =packages.el= :: 软件包列表和配置
- =funcs.el= :: 这里应该声明层中使用的所有函数
- =config.el= :: 层特定配置
- =keybindings.el= :: 全局键绑定

另外，对于每个本地包（请参阅下一节），应该有一个文件夹 =<layer>/local/<package>/= 包含该包的源代码。在初始化该包之前，Spacemacs 会将此文件夹添加到您的加载路径。

** layers.el
该文件是第一个要加载的文件，这是可以声明附加层的地方。

例如，层 A 依赖于层 B 的一些功能，然后在层 A 的文件 =layers.el= 中。我们可以添加：

#+begin_src emacs-lisp
(configuration-layer/declare-layer 'B)
#+end_src

效果是 B 被认为是一个已使用的层，并且将被加载，就像它被添加到 =dotspacemacs-configuration-layers= 变量一样。

** packages.el
它包含该层的包的列表以及层中包含的包的实际配置。

此文件在 =layers.el= 之后加载。

它必须定义一个名为 =<layer>-packages= 的变量，它应该是该层所需的所有包的列表。一些有效的包的规格如下：

#+begin_src emacs-lisp
(defconst mylayer-packages
  '(
    ;; Get the package from MELPA, ELPA, etc.
    some-package
    (some-package :location elpa)

    ;; A local package
    (some-package :location local)

    ;; A package recipe
    (some-package :location (recipe
                             :fetcher github
                             :repo "some/repo"))

    ;; An excluded package
    (some-package :excluded t)
    ))
#+end_src

=:location= 属性指定可以找到包的位置。Spacemacs 目前支持符合 ELPA 标准的包，本地包和 MELPA recipes（通过 Quelpa 包）。本地包应位于 =<layer>/local/<package>/= 。有关 recipes 的信息，请参阅[[https://github.com/milkypostman/melpa#recipe-format][ MELPA 文档]]。

可以通过将 =:excluded= 属性设置为 true 来 /排除/ 包。这样就可以防止包被安装，即使它被另一个层使用。

对于每个包含的包，您可以定义一个或多个以下函数，由 Spacemacs 按顺序调用以初始化包。

1. =<layer>/pre-init-<package>=
2. =<layer>/init-<package>=
3. =<layer>/post-init-<package>=

这些函数的任务是加载和配置相关包。除了下载包并将其放在加载路径中之外，Spacemacs 将不会执行任何操作。

*注意：* 除非至少有一个层为包定义了一个 =init= 函数，否则不会安装包。也就是说，在某种意义上， =init= 函数执行强制设置，而 =pre-init= 和 =post-init= 函数执行可选的设置。这可以用于管理跨层依赖关系，稍后我们将讨论这个。

** funcs.el
它包含层中使用的所有定义的函数。

该文件在 =packages.el= 之后和 =config.el= 之前加载。

保护函数的定义是确保一个包实际使用的好习惯。例如：

#+begin_src emacs-lisp
(when (configuration-layer/package-usedp 'my-package)
  (defun spacemacs/my-package-enable () ...)
  (defun spacemacs/my-package-disable () ...))
#+end_src

通过保护这些函数，我们避免定义它们，以防未使用包“my-package”。

** config.el
该文件配置层，如声明层变量默认值，和设置与该层相关的一些其他变量。

这个文件是在 =funcs.el= 之后加载的。

** keybindings.el
它包含全局键绑定。

这是加载的最后一个文件。

这里的 /全局/ 这个词意味着 /独立于任何包/ 。由于最终用户可以拒绝包的任何设置，因此您无法确定，只是因为您的层包含一个包，因此该包将一定被加载。因此，无论安装哪些软件包，这些文件中的代码一般都是安全的。

关于这一点更多的在下一节。

* Spacemacs 加载过程
Spacemacs 加载过程可以归纳如下：

1. Spacemacs 遍历所有启用的层，并评估其文件。首先 =layer.el= 被加载以声明层依赖关系。然后 =packages.el= 和 =funcs.el= 被加载，但没有发生任何事情，因为这些文件只定义函数和变量，然后应用 =config.el= 引入更改。
2. Spacemacs 会检查哪些包应该被下载和安装。一个包要被安装，就一定要
   - 包含在用户启用的层里
   - 不被用户启用的任何其他层排除
   - 不被用户自己排除，而且
   - 必须至少有一个 =<layer>/init-<package>= 函数被定义
   或者，如果包是最终用户的 =dotspacemacs-additional-packages= 的一部分，那么它也将被安装。
3. 应安装的所有软件包按字母顺序安装，内置的 Emacs 库中的 =package.el= 负责隐式依赖。如果可能，不遵循规则 2 的已安装的包以及其依赖关系被删除。（最后一个行为是可选的，但是默认是选中的。）
4. 依次执行每个安装包的 =pre-init=, =init= 和 =post-init= 函数。

我们感兴趣的是第四步。如果没有为其定义 =init= 函数，则不安装软件包，这是非常重要的。

我们说，如果一个层为一个包定义了一个 =init= 函数，那这个层 *拥有* 这个包。如果一个层只定义了 =pre-init= 或 =post-init= 函数，那么它 *不* 拥有一个包。

只有一个层可能拥有一个包。由于层是按照用户的点文件中的规范进行处理的，因此层可能“夺取”先前启用的层所拥有的包的所有权。

* 案例研究：自动补全
Spacemacs 提供了一个称为 =auto-completion= 的层，在许多模式中提供自动补全功能。它使用 =company= 包做到這些。该层拥有 =company= 包，因此它定义了一个名为 =auto-completion/init-company= 的函数。

当用户启用 =auto-completion= 层时，Spacemacs 会找到它，并在包列表中找到 =company= 。只要这个 =company= 不被用户或其他层排除，然后 Spacemacs 定位并运行 =company= 的 =init= 函数。此函数包含一个调用 =use-package= 来设置基本配置。

然而，自动补全是一场双马比赛。由于其本质，它是具体的主模式的问题。期望 =auto-completion= 层包含每个可能的主模式的配置是毫无意义的，期待每个编程语言层（python，ruby 等）自己完全配置 =company= 同样没用。

这是使用 =post-init= 函数解决的。例如，Python 层包含 =company= 包，并定义了一个名为 =python/post-init-company= 的函数。这个函数在 =auto-completion/init-company= 之后调用，但是如果没有调用

- =auto-completion= 层没有启用，在这种情况下不会找到 =company= 的 =init= 函数
- =company= 包被用户或其他层排除

因此， =python/post-init-company= 是将与 =company= 相关联的配置放到 Python 模式下的唯一安全的方法。

如果 Python 层为 =company= 定义了一个 =init= 函数，即使 =auto-completion= 层被禁用，该包也将被安装，这不是我们想要的。

* 层提示和技巧

** 交叉依赖
Spacemacs 提供了一些其他有用的函数，可用于检查是否包括其他层或包。

- =configuration-layer/layer-usedp= :: 检查一个层是否启用
- =configuration-layer/package-usedp= :: 检查一个包是否将被安装

这些在某些情况下是有用的，但通常您可以通过只使用 =post-init= 函数获得想要的结果。

对于需要启用其他层的层，请使用函数 =configuration-layer/declare-layer= 和 =configuration-layer/declare-layers= 来确保即使用户未明确启用层也是如此。调用这些函数必须在 =layers.el= 文件中。

** Use-package
在绝大多数情况下，包 =init= 函数只能调用 =use-package= 。同样，在绝大多数情况下，您需要做的所有配置应该在这样的调用的 =:init= 或 =:config= 块中可行。

什么地方？因为 =:init= 在加载之前执行，并且在 =:config= 之后，这些规则应用。
What goes where? Since =:init= is executed before load and =:config= after,
these rules of thumb apply.

在 =:config= 里应该
- 任何需要包已经加载的东西
- 任何需要很长时间运行的东西，这将破坏启动性能。

=:init= 块应包含针对包的入口点的设置。如果软件包应由用户手动加载，或由钩子加载，如果软件包应在某些事件上加载，这包括键绑定。两个都不常见！

** Use-package 钩子 
:PROPERTIES:
:CUSTOM_ID: use-package-hooks
:END:
Spacemacs 包括一个宏，用于在 fact 之后添加更多的代码到调用 =use-package= 的 =:init= 或 =:config= 块。这对于 =pre-init= 或 =post-init= 函数将“注入”代码放入 =init= 函数的 =use-package= 调用很有用。

#+begin_src emacs-lisp
(spacemacs|use-package-add-hook helm
  :pre-init
  ;; Code
  :post-init
  ;; Code
  :pre-config
  ;; Code
  :post-config
  ;; Code
  )
#+end_src

由于对 =use-package= 的调用可能会立即评估 =:init= 块，所以要在该块中注入代码的任何函数都必须在调用 =use-package= =之前= 运行。此外，由于对 =use-package= 的调用通常发生在 =init-<package>= 函数中，对 =spacemacs|use-package-add-hook= 的调用通常发生在 =pre-init-<package>= 函数中，而不是在 =post-init-<package>= 。 在 =pre-init= 里这样做是相当安全的，所以这应该是默认选择。

** 最佳做法
如果你违反了这些规则，你应该知道你在做什么，并且有很好的理由去做。

*** 包所有权
每个包只应该由一个层所拥有。拥有该包的层应该定义其 =init= 函数。其他层应依赖于 =pre-init= 或 =post-init= 函数。

*** 本地化您的配置
*每个函数只能假定一个包的存在。* 除了一些例外， =pre-init= ， =init= 和 =post-init= 函数 /只能/ 正确配置它们定义的包。由于用户可以排除一组任意的包，所以没有先天的安全方式来假定另外一个包被包含。如果你必须，使用 =configuration-layer/package-usedp= 。

这可能是非常具有挑战性的，所以请以此为准则，而没有绝对的东西。用户很可能通过排除错误的软件包来破坏其 Spacemacs 的安装，我们不想不惜一切代价来阻止它。

*** 顺序加载
在 Spacemacs 中，按照包含在点文件中的顺序加载层，并按照字母顺序加载包。在您使用此属性的极少数情况下，您应该确保写好文档。许多人会假定层可以以任意顺序包含（在大多数情况下是正确的），并可以重新命名那些包，（而且在大多数情况下也是正确的）。

最好写层，使其独立于顺序加载。 =pre= 和 =post-init= 函数与 =configuration-layer/package-usedp= 一起是有帮助的。

*** 不要使用 require
不要使用 =require= 。如果你发现自己需要使用，你几乎肯定会做错事。Spacemacs 中的包应该通过自动加载来加载，而不是通过您明确的加载。 在包初始化函数中调用 =require= 将在启动时加载一个包。在一个 =use-package= 的 =:init= 块中的代码也不应该导致任何东西被加载。 如果您在一个 =:config= 块中需要 =require= ，那就是其他一些包缺少适当的自动加载的标志。

*** 自动加载一切
推迟一切。你应该有一个非常好的理由不推迟加载一个包。

* How do I ... idiomatically?

** 为主模式设置自动补全
在你的层的 =config.el= ，调用 =spacemacs|defvar-company-backends= 。

#+begin_src emacs-lisp
(spacemacs|defvar-company-backends yoyo-mode)
#+end_src

这将创建一个名为 =company-backends-yoyo-mode= 的变量。在包 =init= 函数中，应该将后端推送到这个变量。但是，当然只有如果 =auto-completion= 层启用时（才这样做）。

#+begin_src emacs-lisp
(defconst yoyo-packages '(
                          ;; ...
                          some-weird-package
                          ;; ...
                          )

  (when (configuration-layer/package-usedp 'company)
    (defun yoyo/init-some-weird-package ()
      (use-package some-weird-package
        :defer t
        ;; This has to be in init because it's a package entry point
        :init
        (push 'some-weird-backend company-backends-yoyo-mode))))
#+end_src

最后，当我们进入 =yoyo 模式= 时，我们必须确保 company 启动，但是只有在 =auto-completion= 层被启用的情况下才会重新启动。

#+begin_src emacs-lisp
(defconst yoyo-packages '(
                          ;; ...
                          yoyo-mode
                          ;; ...
                          ))

(defun yoyo/init-yoyo-mode ()
  (use-package yoyo-mode
    ;; Some configuration goes here, however nothing relating to company
    ;; since this function may be called even if company is not installed!
    ))

(when (configuration-layer/package-usedp 'company)
  (defun yoyo/post-init-yoyo-mode ()
    ;; This makes no reference to `some-weird-package', which may have
    ;; been excluded by the user
    (spacemacs|add-company-hook yoyo-mode)))
#+end_src
