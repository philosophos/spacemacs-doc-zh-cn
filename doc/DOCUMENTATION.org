#+TITLE: Spacemacs documentation

* Spacemacs documentation                                   :TOC_4_gh:noexport:
- [[#核心支柱][核心支柱]]
  - [[#mnemonic][Mnemonic]]
  - [[#discoverable][Discoverable]]
  - [[#consistent][Consistent]]
  - [[#crowd-configured][Crowd-Configured]]
- [[#突出的功能][突出的功能]]
- [[#截图][截图]]
- [[#谁能从中受益][谁能从中受益？]]
- [[#更新和回滚][更新和回滚]]
  - [[#更新-spacemacs-存储库][更新 Spacemacs 存储库]]
    - [[#自动更新][自动更新]]
    - [[#从-spacemacs-缓冲区更新][从 Spacemacs 缓冲区更新]]
    - [[#用-git-手动更新][用 git 手动更新]]
  - [[#更新包][更新包]]
- [[#配置层][配置层]]
  - [[#目的][目的]]
  - [[#结构][结构]]
  - [[#配置包][配置包]]
    - [[#with-a-layer][With a layer]]
      - [[#声明][声明]]
      - [[#初始化][初始化]]
      - [[#排除][排除]]
    - [[#without-a-layer][Without a layer]]
  - [[#软件包同步][软件包同步]]
  - [[#配置层的类型][配置层的类型]]
  - [[#向上游提交配置层][向上游提交配置层]]
  - [[#示例主题-megapack-示例][示例：主题 Megapack 示例]]
  - [[#管理私有配置层][管理私有配置层]]
    - [[#使用私有目录][使用私有目录]]
    - [[#使用外部-git-仓库][使用外部 Git 仓库]]
    - [[#使用个人分支][使用个人分支]]
  - [[#写层的提示][写层的提示]]
- [[#dotfile-配置][Dotfile 配置]]
  - [[#dotfile-安装][Dotfile 安装]]
  - [[#替代的-dotdirectory][替代的 dotdirectory]]
  - [[#dotfile-更改的同步][dotfile 更改的同步]]
  - [[#测试-dotfile][测试 dotfile]]
  - [[#dotfile-内容][Dotfile 内容]]
    - [[#配置函数][配置函数]]
    - [[#自定义变量][自定义变量]]
  - [[#声明配置层][声明配置层]]
    - [[#设置配置层变量][设置配置层变量]]
    - [[#禁用其他层中的层服务][禁用其他层中的层服务]]
    - [[#选择忽略层的包][选择/忽略层的包]]
    - [[#排除包][排除包]]
- [[#概念][概念]]
  - [[#编辑风格][编辑风格]]
    - [[#vim][Vim]]
    - [[#emacs][Emacs]]
    - [[#hybrid][Hybrid]]
  - [[#状态][状态]]
  - [[#evilified-状态][Evilified 状态]]
  - [[#evil-前缀][Evil 前缀]]
  - [[#通用参数][通用参数]]
  - [[#瞬态状态][瞬态状态]]
- [[#vimevil-和-spacemacs-之间的差异][Vim，Evil 和 Spacemacs 之间的差异]]
  - [[#vim-surround-案例][vim-surround 案例]]
- [[#evil-插件][Evil 插件]]
- [[#绑定键][绑定键]]
- [[#gui-elements][GUI Elements]]
  - [[#color-themes][Color themes]]
  - [[#font][Font]]
  - [[#gui-toggles][GUI Toggles]]
      - [[#global-line-numbers][Global line numbers]]
  - [[#mode-line][Mode-line]]
      - [[#powerline-font-installation-for-terminal-mode-users][Powerline font installation for terminal-mode users]]
      - [[#flycheck-integration][Flycheck integration]]
      - [[#anzu-integration][Anzu integration]]
      - [[#battery-status-integration][Battery status integration]]
      - [[#powerline-separators][Powerline separators]]
      - [[#minor-modes][Minor Modes]]
      - [[#customizing-the-mode-line][Customizing the mode-line]]
- [[#layouts-and-workspaces][Layouts and workspaces]]
  - [[#layouts][Layouts]]
    - [[#the-default-layout][The default layout]]
    - [[#project-layouts][Project layouts]]
    - [[#custom-layouts][Custom Layouts]]
    - [[#saveload-layouts-into-a-file][Save/Load layouts into a file]]
    - [[#layout-key-bindings][Layout key bindings]]
  - [[#workspaces][Workspaces]]
    - [[#workspace-key-bindings][Workspace key bindings]]
- [[#commands][Commands]]
  - [[#vim-key-bindings][Vim key bindings]]
    - [[#escaping][Escaping]]
    - [[#executing-vim-and-emacs-exm-x-commands][Executing Vim and Emacs ex/M-x commands]]
    - [[#leader-key][Leader key]]
    - [[#additional-text-objects][Additional text objects]]
  - [[#reserved-prefix-command-for-user][Reserved prefix command for user]]
  - [[#completion][Completion]]
    - [[#helm][Helm]]
      - [[#c-z-and-tab-switch][C-z and Tab switch]]
      - [[#helm-focus][Helm focus]]
      - [[#helm-transient-state][Helm transient state]]
    - [[#ivy][Ivy]]
  - [[#discovering][Discovering]]
    - [[#key-bindings][Key bindings]]
      - [[#which-key][Which-key]]
      - [[#helm-describe-key-bindings][Helm describe key bindings]]
    - [[#getting-help][Getting help]]
    - [[#available-layers][Available layers]]
      - [[#available-packages-in-spacemacs][Available packages in Spacemacs]]
      - [[#new-packages-from-elpa-repositories][New packages from ELPA repositories]]
    - [[#toggles][Toggles]]
  - [[#navigating][Navigating]]
    - [[#pointcursor][Point/Cursor]]
      - [[#smooth-scrolling][Smooth scrolling]]
    - [[#vim-motions-with-avy][Vim motions with avy]]
      - [[#ace-link-mode][ace-link mode]]
    - [[#unimpaired-bindings][Unimpaired bindings]]
    - [[#jumping-joining-and-splitting][Jumping, Joining and Splitting]]
      - [[#jumping][Jumping]]
      - [[#joining-and-splitting][Joining and splitting]]
    - [[#window-manipulation][Window manipulation]]
      - [[#window-manipulation-key-bindings][Window manipulation key bindings]]
      - [[#window-manipulation-transient-state][Window manipulation transient state]]
      - [[#golden-ratio][Golden ratio]]
    - [[#buffers-and-files][Buffers and Files]]
      - [[#buffers-manipulation-key-bindings][Buffers manipulation key bindings]]
      - [[#buffers-manipulation-transient-state][Buffers manipulation transient state]]
      - [[#special-buffers][Special Buffers]]
      - [[#files-manipulations-key-bindings][Files manipulations key bindings]]
      - [[#emacs-and-spacemacs-files][Emacs and Spacemacs files]]
      - [[#browsing-files-with-helm][Browsing files with Helm]]
    - [[#ido][Ido]]
    - [[#ido-transient-state][Ido transient state]]
    - [[#neotree-file-tree][NeoTree file tree]]
      - [[#neotree-navigation][NeoTree navigation]]
      - [[#opening-files-with-neotree][Opening files with NeoTree]]
      - [[#other-neotree-key-bindings][Other NeoTree key bindings]]
      - [[#neotree-mode-line][NeoTree mode-line]]
      - [[#neotree-source-control-integration][NeoTree Source Control Integration]]
      - [[#neotree-theme][NeoTree Theme]]
    - [[#bookmarks][Bookmarks]]
    - [[#docview-mode][DocView mode]]
  - [[#auto-saving][Auto-saving]]
    - [[#frequency-of-auto-saving][Frequency of auto-saving]]
    - [[#location-of-auto-saved-files][Location of auto-saved files]]
    - [[#disable-auto-save][Disable auto-save]]
  - [[#searching][Searching]]
    - [[#with-an-external-tool][With an external tool]]
      - [[#useful-key-bindings][Useful key bindings]]
      - [[#searching-in-current-file][Searching in current file]]
      - [[#searching-in-all-open-buffers-visiting-files][Searching in all open buffers visiting files]]
      - [[#searching-in-files-in-an-arbitrary-directory][Searching in files in an arbitrary directory]]
      - [[#searching-in-a-project][Searching in a project]]
      - [[#searching-the-web][Searching the web]]
    - [[#persistent-highlighting][Persistent highlighting]]
    - [[#highlight-current-symbol][Highlight current symbol]]
    - [[#visual-star][Visual Star]]
    - [[#listing-symbols-by-semantic][Listing symbols by semantic]]
    - [[#helm-swoop][Helm-swoop]]
  - [[#editing][Editing]]
    - [[#paste-text][Paste text]]
      - [[#paste-transient-state][Paste Transient-state]]
      - [[#auto-indent-pasted-text][Auto-indent pasted text]]
    - [[#text-manipulation-commands][Text manipulation commands]]
    - [[#text-insertion-commands][Text insertion commands]]
    - [[#smartparens-strict-mode][Smartparens Strict mode]]
    - [[#zooming][Zooming]]
      - [[#text][Text]]
      - [[#frame][Frame]]
    - [[#increasedecrease-numbers][Increase/Decrease numbers]]
    - [[#spell-checking][Spell checking]]
    - [[#region-selection][Region selection]]
      - [[#expand-region][Expand-region]]
      - [[#indent-text-object][Indent text object]]
    - [[#region-narrowing][Region narrowing]]
    - [[#replacing-text-with-iedit][Replacing text with iedit]]
      - [[#iedit-states-key-bindings][iedit states key bindings]]
      - [[#examples][Examples]]
    - [[#replacing-text-in-several-files][Replacing text in several files]]
    - [[#renaming-files-in-a-directory][Renaming files in a directory]]
    - [[#commenting][Commenting]]
    - [[#regular-expressions][Regular expressions]]
    - [[#deleting-files][Deleting files]]
    - [[#editing-lisp-code][Editing Lisp code]]
      - [[#lisp-key-bindings][Lisp Key Bindings]]
    - [[#mouse-usage][Mouse usage]]
  - [[#managing-projects][Managing projects]]
  - [[#registers][Registers]]
  - [[#errors-handling][Errors handling]]
  - [[#compiling][Compiling]]
  - [[#modes][Modes]]
    - [[#major-mode-leader-key][Major Mode leader key]]
    - [[#helm-1][Helm]]
  - [[#emacs-server][Emacs Server]]
    - [[#connecting-to-the-emacs-server][Connecting to the Emacs server]]
  - [[#keeping-the-server-alive][Keeping the server alive]]
  - [[#troubleshoot][Troubleshoot]]
    - [[#loading-fails][Loading fails]]
    - [[#upgradingdowngrading-emacs-version][Upgrading/Downgrading Emacs version]]
- [[#achievements][Achievements]]
  - [[#issues][Issues]]
  - [[#merged-pull-requests][Merged Pull Requests]]
  - [[#stars-forks-and-watchers][Stars, forks and watchers]]
  - [[#gitter-chat][Gitter chat]]
  - [[#first-times][First times]]
  - [[#special-mentions][Special Mentions]]
  - [[#special-titles][Special Titles]]
- [[#thank-you][Thank you]]

* 核心支柱
四个核心支柱：Mnemonic, Discoverable, Consistent and "Crowd-Configured".

如果违反了这些核心支柱中的任何一个，开一个 issue，我们会尽力解决它。

** Mnemonic
键绑定使用有助于记忆的前缀组织，like ~b~ for buffer, ~p~ for project, ~s~ for search, ~h~ for help, etc...

** Discoverable
创新的实时显示可用的键绑定。简单的查询系统可以快速找到可用的层，包等。

** Consistent
多亏了明确定义的一组约定，类似的功能在每个地方具有相同的键绑定。对于 Spacemacs 附带的任何图层，文档是强制性的。

** Crowd-Configured
社区驱动的配置提供了由高级用户调整的策划的包，并且错误被快速修复。

* 突出的功能
- 将 *模式化编辑的效率* 带给强大的 Emacs lisp 平台。Modal UX 是可选的，Spacemacs 可以只用 Emacs 的键绑定。

- 与 =Evil= 状态（ =Vim= 模式）完美结合。

- *将手指放在主行上* ，以便更快地进行编辑，并支持 QWERTY 和 BEPO 布局。

- *简约而漂亮的图形界面* 可以为更为重要的东西：您的文本文件 保留您的可用屏幕空间。

- *快速的启动时间* ：软件包和配置尽可能地延迟加载。

- 通过大量使用空格键而不是修饰键 *降低 RSI 的风险* 。如果您的拇指有问题，您仍然可以用修饰符来用 Spacemacs。

- 有助于您轻松完成改进和新的配置层。

- 在 =Gitter= 和 =IRC= 上（通过 Gitter IRC bridge） *非常活跃和有帮助的社区*

* 截图

[[file:img/spacemacs-python.png]]
/Python/

*注意* ：尽管截图频繁更新，但 Spacemacs 正在快速发展，屏幕截图可能无法正确反映项目的当前状态。

* 谁能从中受益？
- Spacemacs 最初是打算被 *Vim 用户* 使用，他们希望通过使用 Emacs 进入下一个级别（参见 Vimmers [[file:VIMUSERS.org][指南]] ）。但是现在， *非 Vim 用户* 可以通过选择 =emacs= 编辑风格来完美使用它。

- 它也适合想要降低由默认 Emacs 键绑定引起的 *[[http://en.wikipedia.org/wiki/Repetitive_strain_injury][RSI 风险]]* 的人。（这是一个假设，没有官方的研究来证明这一点！）如果您使用拇指有问题，您仍然可以使用 =emacs= 编辑风格，将前缀键放在修饰键组合上。

- Emacs 用户想要学习 *不同的方式来编辑文件* 或想要学习 Vim 键绑定，甚至想通过将其风格设置为 =hybrid= 来混合两种编辑风格。

- Emacs 用户想要一个简单但深入的配置系统，大大 *降低了.emacs 破产的风险* 。

- *结对编程* 用户感谢开箱即用的支持动态切换编辑风格。Vim 用户和 Emacs 用户可以舒适地使用相同的 Spacemac。

* 更新和回滚
** 更新 Spacemacs 存储库
有几种更新 Spacemacs 的核心文件和层信息的方法。建议先更新包；请参阅下一节。

*** 自动更新
每次启动时 Spacemacs 会自动检查新版本。当它检测到新版本可用时，箭头将出现在状态栏中。点击它来更新 Spacemacs。您必须在更新后重新启动 Emacs。
[[file:img/powerline-update.png]]
/Update Button/

*注意* ：如果使用 Spacemacs 的 =develop= 分支，则自动更新被禁用 －－ 您必须使用 git 手动更新。

*** 从 Spacemacs 缓冲区更新
使用 Spacemacs 缓冲区中标有“Update Spacemacs”的按钮。系统将提示您输入要使用的版本。

*注意* ：如果您使用 Spacemacs 的 =develop= 分支，则无法使用此方法。

*** 用 git 手动更新
要手动更新，关闭 Emacs 并更新 git 存储库：

#+BEGIN_SRC sh
$ git pull origin master
#+END_SRC

*注意* ：主分支被认为是不可变的，因为您不能通过添加自己的提交来修改它。如果这样做，您将会破坏主分支上的 Spacemacs 的自动更新。要 fork Spacemacs 代码，您必须使用您手动管理的自定义分支。

** 更新包
要更新 Spacemacs 使用的 Emacs 软件包，请按 RET（enter）或单击 banner 下的启动页面中的链接 =[Update Packages]= ，然后重新启动 Emacs。如果您愿意，可以使用命令 =configuration-layer/update-packages= 而不是按钮。

如果出现任何问题，您应该能够通过按 ~RET~ 或单击启动页面中的 =[Rollback Package Update]= 链接来回滚更新，并选择回滚位置（按日期排序）。 此按钮使用命令 =configuration-layer/rollback= 。

* 配置层
  :PROPERTIES:
  :CUSTOM_ID: configuration-layers
  :END:
本节是层的概述。编写配置层的更广泛的介绍可以在 [[file:LAYERS.org][这里]] 找到（推荐阅读！）。

** 目的
层帮助收集相关的软件包以提供功能。例如， =python= 层为 python 文件提供自动完成，语法检查和 REPL 支持。这种方法有助于保持配置的有序性，并减少用户的开销，使他们不必考虑要安装的软件包。要安装所有 =python= 功能，用户只需将 =python= 层添加到它们的 dotfile。

** 结构
配置按层组织。每一个层都有如下结构：

#+BEGIN_EXAMPLE
    [layer_name]
      |__ [local]
      | |__ [package 1]
      | |     ...
      | |__ [package n]
      |-- layers.el
      |__ packages.el
      |__ funcs.el
      |__ config.el
      |__ keybindings.el

    [] = directory
#+END_EXAMPLE

Where:

| 文件           | 作用                                         |
|----------------+----------------------------------------------|
| layers.el      | 声明额外层的地方                             |
| packages.el    | 包的列表及其配置函数（init，post-init 等）   |
| funcs.el       | 层中定义的所有函数（例如在包配置中使用）     |
| config.el      | 层配置（定义层变量默认值并设置一些配置变量） |
| keybindings.el | 普通键绑定没有绑定到的特定的包配置           |

=Packages= 可以是：
- 从 =ELPA= 兼容的存储库安装的 =ELPA= 软件包
- =本地= 文件夹中的本地包
- 使用 [[https://github.com/quelpa/quelpa][quelpa ]]从在线源安装的。

** 配置包
*** With a layer
**** 声明
=软件包= 在称为 =<layer>-packages= 的变量中声明，其中 =<layer>= 是层的名称。

例子：

#+BEGIN_SRC emacs-lisp
(setq <layer>-packages '(package1 package2 ...)
#+END_SRC

来自所有图层的所有软件包都按字母顺序处理，因此有时您必须使用一些 =with-eval-after-load= 黑魔法来正确配置它们。例如，如果包 =A= 依赖于 =B= ，则可以使用以下配置 =A= ：

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'B ...)
#+END_SRC

有关使用 quelpa 或本地软件包安装软件包的详细信息，请参阅 [[file:LAYERS.org::packages.el][LAYERS]]。

**** 初始化
要初始化包 =xxx= ，请在 =packages.el= 中定义具有此格式的函数：

#+BEGIN_SRC emacs-lisp
(defun <layer>/init-xxx () ...body )
#+END_SRC

通常使用 [[https://github.com/jwiegley/use-package][use-package]] 宏来定义 body。

**** 排除
可以在每个层的基础上从 Spacemacs 中排除一些包。当配置层旨在替换在 Spacemacs 层中声明的存储包时，这是有用的。

为此，添加要排除的包名称到变量 =<layer>-excluded-packages= 。

例子：

#+BEGIN_SRC emacs-lisp
(setq <layer>-excluded-packages '(package1 package2 ...)
#+END_SRC

*** Without a layer
有时一个层可能是一个不必要的开销，如果你只想安装一个与它相关的配置很少的包，那就是这种情况。一个很好的例子是一些 niche 语言，您只对语法高亮感兴趣。

您可以通过将其添加到 dotfile 中的在 =dotspacemacs/layers= 函数下的变量 =dotspacemacs-additional-packages= 中来安装。

例如，要安装 =llvm-mode= 和 =dts-mode= ：
#+BEGIN_SRC emacs-lisp
(defun dotspacemacs/layers ()
  "Configuration Layers declaration..."
  (setq-default
   ;; ...
   dotspacemacs-additional-packages '(llvm-mode dts-mode)
   ;; ...
   ))
#+END_SRC

如果要为其添加一些配置，请将配置放在 =dotspacemacs/user-config= 函数中，或者考虑创建一个图层。

** 软件包同步
Spacemacs 将仅安装用户明确使用的包。如果使用层（即在 =dotspacemacs-configuration-layers= 列出的），则认为使用包。

未使用的任何软件包都被认为是孤立的，并在下次启动 Emacs 时被删除。

** 配置层的类型
有两种类型的配置层：
  - 发行的层（在 =layers= 目录中，这些层是由社区共享并在上游合并的贡献）
  - 私有的（在 =private= 目录中，它们被 Git 忽略）

** 向上游提交配置层
如果您决定提供一个配置层，请先在 [[file:../CONTRIBUTING.org][CONTRIBUTING]] 中查看贡献准则。

** 示例：主题 Megapack 示例
这是一个简单的配置层，列出了一堆主题，您可以在 [[file:../layers/+themes/themes-megapack/README.org][这里]] 找到。

要安装它，只需添加 =themes-megapack= 到你的 =~/.spacemacs= 像这样：

#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-configuration-layers '(themes-megapack))
#+END_SRC

添加此图层将安装大约 100 个主题;要卸载它们，请从 =dotspacemacs-configuration-layers= 中删除该层，然后按 ~SPC f e R~ .

** 管理私有配置层
Spacemacs 的配置系统具有足够的灵活性，可以让您以不同的方式管理您的私有层。

*** 使用私有目录
Git 忽略了私有目录中的所有内容，因此它是存储私有层的好地方。这种方法有一个很大的缺点： /你的层不被源码控制/ 。

*** 使用外部 Git 仓库
这是管理私有层的推荐方法。

最好的方法是将所有的私有层存储到外部 Git 仓库中。如果你有一个 =dotfiles= 存储库，将它们存储在您的 =dotfiles= 存储库中是一个很好的做法。把你的 =~/.spacemacs= 文件也放在里面。

然后，您可以自由地将层链接到 =~/emacs.d/private= ， /或者/ 让它们在任何地方，并引用到 =~/.spacemacs= 的变量 =dotspacemacs-configuration-layer-path= 中的父目录。

请注意，您还可以为所有私有层创建一个专用存储库，然后直接在 =~/.emacs.d/private= 中克隆该存储库。

*** 使用个人分支
管理私有层的最后一个主要方法就是将它们推送到一个个人分支中，与上游 =master= 或 =develop= 保持最新。

** 写层的提示
请参考本介绍了解 [[file:LAYERS.org][层]] 的一些技巧，以及如何使其符合 Spacemacs 的理念和加载策略。

* Dotfile 配置
:PROPERTIES:
:CUSTOM_ID: dotfile-configuration
:END:
用户配置可以存储在 =~/.spacemacs= 文件中。

** Dotfile 安装
Spacemacs 第一次启动，它会询问几个问题，然后将 =.spacemacs= 安装在 =HOME= 目录中。

** 替代的 dotdirectory
可以使用 dotdirectory =~/.spacemacs.d/= 代替点文件。如果要使用此选项，请将 =~/.spacemacs= 移动到 =~/.spacemacs.d/init.el= 。

也可以使用环境变量 =SPACEMACSDIR= 覆盖 =~/.spacemacs.d/= 的位置。当然，您也可以使用符号链接来更改此目录的位置。

*注意：* =~/.spacemacs= 将始终优先于 =~/.spacemacs.d/init.el= ，所以为了 =~/.spacemacs.d/init.el= 被 Spacemacs 使用， =~/.spacemacs= 不能存在。

** dotfile 更改的同步
要应用 =~/.spacemacs= 中所做的修改，按 ~SPC f e R~ 。它将重新执行 Spacemacs 初始化过程。

*注意* ：同步重新执行函数 =dotspacemacs/init= ， =dotspacemacs/user-init= 和 =dotspacemacs/user-config= 。根据此函数的内容，您可能会遇到一些不必要的副作用。例如，如果您使用 =dotspacemac/user-config= 中的切换来启用某些行为，则当 dotfile 重新同步时，此行为将被关闭。为了避免这些副作用，建议使用 =setq= 表达式而不是切换函数，或者使用 =on= 或 =off= 版本（而不是  =spacemacs/toggle-<thing>= ，使用 =spacemacs/toggle-<thing>-on= 或 =spacemacs/toggle-<thing>-off= ）。

可以使用通用参数（ ~SPC u SPC f e R~ ） /跳过/ =dotspacemacs/user-config= 的执行。

** 测试 dotfile
您可以使用命令 =SPC SPC dotspacemacs/test-dotfile= 来检查您的 =~/.spacemacs= 是否正确。除此之外，这将检查是否可以找到声明的层，并且变量具有合理的值。当您用 ~spc f e r~ 同步时，这些测试也会自动运行。

** Dotfile 内容
*** 配置函数
 =~/.spacemacs= 文件中的三个特殊功能可用于在 Spacemacs 加载过程的开始和结束时执行配置：
- =dotspacemacs/layers= 在 Spacemacs 初始化的启动时被调用，这是您设置 Spacemacs 发行版和声明用于您的配置的层的位置。您还可以添加或排除您选择的包，并调整 Spacemacs 加载的一些行为。
- =dotspacemacs/init= 在 Spacemacs 初始化的启动时，在层配置之前被调用。除了修改以前缀为 =dotspacemacs-= 的 Spacemacs 变量值之外， *您不应将任何用户代码放在其中。*
- =dotspacemacs/user-init= 在 =dotspacemacs/init= 之后，在层配置之前，会被立即调用。此函数对于在加载包之前需要设置的变量非常有用。
- =dotspacemacs/user-config= 在层配置后的 Spacemacs 初始化结束时被调用。这是您的大多数配置应该完成的地方。除非明确指定一个变量在加载程序包之前应该被设置，否则应该将代码放在这里。

*** 自定义变量
来自 =M-x customize-group= Emacs 内置功能的自定义变量配置由 Emacs 自动保存在 =~/.spacemacs= 文件的末尾。

** 声明配置层
要使用配置层，请通过将其添加到 =~/.spacemacs= 的 =dotspacemacs-configuration-layers= 变量中，在您的 dotfile 中声明它。

*注意：* 在本文档中， =已使用的层= 与 =已声明的层= 相当。

例如， [[Thank you][RMS]] 可以添加他的私有配置层：

#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-configuration-layers
  '(
    ;; other layers
    ;; rms layer added at the end of the list
    rms
  ))
#+END_SRC

Spacemacs 附带的官方层存储在 =~/.emacs.d/layers= 中。目录 =~/.emacs.d/private= 是您的私有层的插入位置。如果您告诉 Spacemacs 在哪里寻找层，可以在您选择的位置放置它们。这通过在 =~/.spacemacs= 中设置 list =dotspacemacs-configuration-layer-path= 来完成。例如在 =~/.myconfig= 中添加一些层，设置如下变量：

#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-configuration-layer-path '("~/.myconfig/"))
#+END_SRC

*** 设置配置层变量
一些配置层具有启用特定功能的配置变量。例如， [[file:../layers/+source-control/git/README.org][git 层]] 有几个配置变量，可以直接在 =dotspacemacs-configuration-layers= 中设置，如下所示：

#+BEGIN_SRC emacs-lisp
(defun dotspacemacs/layers ()
  ;; List of configuration layers to load.
  (setq-default dotspacemacs-configuration-layers
    '(auto-completion
      (git :variables
           git-magit-status-fullscreen t
           git-variable-example nil)
      smex)))
#+END_SRC

 =:variables= 关键字是方便保持层配置接近他们的声明。在 dotfile 的 =dotspacemacs/user-init= 函数中设置层变量也是配置层的完美的有效的方式。

*** 禁用其他层中的层服务
通常层启用其他层可以使用的服务。例如，如果您使用层 =auto-completion= ，则支持 =auto-completion= 的每个其他层都将启用此功能。

有时您可能想要禁用某些特定层中的层所添加的服务。假设要禁用 =org= 和 =git= 层中的 =auto-completion= ，可以使用以下层声明来执行。

#+BEGIN_SRC emacs-lisp
(defun dotspacemacs/layers ()
  ;; List of configuration layers to load.
  (setq-default dotspacemacs-configuration-layers
    '(org git
      (auto-completion :disabled-for org git))))
#+END_SRC

您还可以使用 =:enabled-for= 构造来禁止 /除了/ 明确标识之外的 /所有/ 层。

#+BEGIN_SRC emacs-lisp
(defun dotspacemacs/layers ()
  ;; List of configuration layers to load.
  (setq-default dotspacemacs-configuration-layers
    '(java python c-c++
      (auto-completion :enabled-for java python))))
#+END_SRC

注意 =:enabled-for= 可能是一个空列表。

#+BEGIN_SRC emacs-lisp
(defun dotspacemacs/layers ()
  ;; List of configuration layers to load.
  (setq-default dotspacemacs-configuration-layers
    '(java python c-c++
      (auto-completion :enabled-for))))
#+END_SRC

如果两者都存在， =:enabled-for= 优先于 =:disabled-for= 。

*** 选择/忽略层的包
默认情况下，声明的层安装/配置所有相关的软件包。您可能只想选择其中一些或忽略其中的一些。可以使用 =:packages= 关键字。

例如，忽略来自 =spacemacs-ui-visual= 层的 =neotree= 和 =fancy-battery= 包：

#+BEGIN_SRC emacs-lisp
(defun dotspacemacs/layers ()
  ;; List of configuration layers to load.
  (setq-default dotspacemacs-configuration-layers
    '(auto-completion
      (spacemacs-ui-visual :packages (not neotree fancy-battery))))
#+END_SRC

相反的是忽略除了 =neotree= 和 =fancy-battery= 之外的所有包：

#+BEGIN_SRC emacs-lisp
(defun dotspacemacs/layers ()
  ;; List of configuration layers to load.
  (setq-default dotspacemacs-configuration-layers
    '(auto-completion
      (spacemacs-ui-visual :packages neotree fancy-battery)))
#+END_SRC

*注意：* 从图层中忽略软件包与排除软件包不同。排除的包从配置中完全删除，而忽略的包仅在给定层被忽略，但它可以保留在您的系统上。如果给定的层是包的所有者，则忽略该包与排除它相同（因为包变为孤儿包，因此被 Spacemacs 认为是未使用的）。

*** 排除包
您可以使用变量 =dotspacemacs-excluded-packages= 排除不想安装的软件包（有关软件包的更多信息，请参阅 [[#配置层][配置层]]）。

例如，要禁用 =rainbow-delimiters= 包：

#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-excluded-packages '(rainbow-delimiters))
#+END_SRC

当您排除软件包时，Spacemacs 会在下次启动 Emacs 或下一次 dotfile 同步时自动移除它。所有的孤立依赖也会自动移除。排除一个包有效地删除在 Spacemacs 中的 _所有_ 引用，而不会破坏其余的配置，这是一个强大的功能，可以让您快速从 Spacemacs 中删除任何功能。

*注意：* 几个软件包对于 Spacemacs 的正确运行至关重要，这些软件包是受保护的，即使成为孤儿包或被排除，它们也不能被排除或卸载。 =use-package= 是不能从 Spacemacs 中移除的受保护的包的示例。

* 概念
** 编辑风格
Spacemacs 具有多种编辑风格，可以动态切换，提供更简单的方式进行结对编程，例如 Vim 用户和 Emacs 用户之间。

有三种风格：
- Vim,
- Emacs,
- Hybrid (a mix between Vim and Emacs).

*** Vim
Spacemacs 在 Vim 编辑风格中使用 [[https://gitorious.org/evil/pages/Home][Evil]] 模式包来模拟 Vim 键绑定。这是 Spacemacs 的默认风格; 可以通过将 =dotspacemacs-editing-style= 变量设置为 =vim= 来显式设置。

在 Vim 编辑风格（ =插入状态= ）中绑定键：

#+BEGIN_SRC emacs-lisp
(define-key evil-insert-state-map (kbd "C-]") 'forward-char)
#+END_SRC

*** Emacs
Spacemacs 的行为就像在原始 Emacs 中使用配置 Evil 的 Holy 模式，使默认状态为 =emacs 状态= 。将 dotfile 中的 =dotspacemacs-editing-style= 变量设置为 =emacs= 。

在 Emacs 风格中，前缀键 ~M-m~ 可以使用。可以使用 ~SPC t E e~ 和 ~M-m t E e~ 来打开和关闭它。当关闭 =vim= 样式时启用。

在 Emacs 编辑风格（ =emacs 状态= ）中绑定键：

#+BEGIN_SRC emacs-lisp
(define-key evil-emacs-state-map (kbd "C-]") 'forward-char)
#+END_SRC

*** Hybrid
混合编辑风格类似于 Vim 风格，除了 =插入状态= 被称为 =混合状态= 的新状态替换。在 =混合状态= 下，所有的 Emacs 密钥绑定都可用；这就像用 =emacs 状态= 替换 =插入状态= ，但提供了一个孤立的键映射 =evil-hybrid-state-map= 。

以混合编辑风格（ =混合状态= ）绑定键：

#+BEGIN_SRC emacs-lisp
(define-key evil-hybrid-state-map (kbd "C-]") 'forward-char)
#+END_SRC

根据用户喜好，此风格可以调整为更像 Emacs 或更像 Vim。以下变量可用于更改样式配置：

 - =hybrid-mode-default-state= 打开新缓冲区时的默认状态，默认为 =normal= 。将它设置为 =emacs= 更加 emacsy 风格。
 - =hybrid-mode-enable-hjkl-bindings= 如果不是 nil，那么包将配置 =h j k l= 键绑定用于导航。
 - =hybrid-mode-enable-evilified-state= 如果不是 nil，缓冲区被支持时被 =evilified= ，如果是 nil，那么在这些缓冲区中启用 =emacs= 状态。

默认配置为：

#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-editing-style '(hybrid :variables
                                           hybrid-mode-enable-evilified-state t
                                           hybrid-mode-enable-hjkl-bindings nil
                                           hybrid-mode-default-state 'normal)
#+END_SRC

要打开和关闭混合风格，请使用 ~SPC t E h~ 和 ~M-m t E h~ 。当关闭 =vim= 风格时启用。

** 状态
:PROPERTIES:
:CUSTOM_ID: states
:END:
Spacemacs 有 10 个状态：

| 状态         | 默认颜色    | 描述                                                                      |
|--------------+-------------+---------------------------------------------------------------------------|
| normal       | orange      | 类似 =Vim 的 normal 模式= ，用于执行和组合命令                            |
| insert       | green       | 类似 =Vim 的 insert 模式= ，用于实际插入文本                              |
| visual       | gray        | 类似 =Vim 的 visual 模式= ，用于进行文本选择                              |
| motion       | purple      | =Evil= 独有，用于浏览只读缓冲区                                           |
| emacs        | blue        | =Evil= 独有，使用这种状态就像使用没有 Vim 的常规 Emacs                    |
| replace      | chocolate   | =Evil= 独有，覆盖光标下的字符，而不是插入新的字符                         |
| hybrid       | blue        | Spacemacs 独有，这就像插入状态，除了所有的 emacs 键绑定可用               |
| evilified    | light brown | Spacemacs 独有，这是一个修改过的 =emacs 状态= ，带来 Vim 导航，选择和搜索 |
| lisp         | pink        | Spacemacs 独有，用于导航 Lisp 代码并进行修改（更多[[#editing-lisp-code][信息]]）                  |
| iedit        | red         | Spacemacs 独有，用于使用 =iedit= 在多个文本区域之间导航（更多[[#replacing-text-with-iedit][信息]])        |
| iedit-insert | red         | Spacemacs 独有，用于使用 =iedit= 替换多个文本区域（更多[[#replacing-text-with-iedit][信息]])              |

注意：技术上讲还有 =operator= evil 状态。

** Evilified 状态
一些缓冲区不用于编辑文本，并为某些操作提供自己的键绑定。这些经常与 Vim 绑定冲突。为了使这样的缓冲区以一致的方式表现得更像 Vim，它们使用一种称为 /evilified/ 状态的特殊状态。在 evilified 状态下，少量的键像在 Evil 里一样工作，即 =/=, =:=, =h=, =j=, =k=, =l=, =n=, =N=, =v=, =V=, =gg=, =G=, =C-f=, =C-b=, =C-d=, =C-e=, =C-u=, =C-y= 和 =C-z= 。所有其他键按底层模式的预期工作。

Shadowed 键根据模式移动： =a= → =A= → =C-a= → =C-A=

例如，如果模式将函数绑定到 =n= ，那么在 =C-n= 处于 evilified 状态下发现，因为 =n= 和 =N= 都是保留的，而 =C-n= 不是。另一方面，原来绑定到 =k= 的任何东西都会在 =K= 上找到，因为 =k= 是保留的但 =K= 不是。如果在 =K= 上有绑定，那将被移动到 =C-k= 。

除此之外， =C-g= 作为 Emacs 中的一个重要转义键被跳过。因此，任何绑定到 =g= 的内容都将被发现在 =C-G= 上，因为 =g= ， =G= 和 =C-g= 都被保留。

** Evil 前缀
Spacemacs 使用一个前缀键绑定几乎所有的键绑定。

这个前缀键通常被 Vim 用户设置为 ~​,​~ ，在 Spacemacs 中前缀键设置为 SPC（空格键，因此称为 spacemacs）。这个键是键盘上最易摸到的键，用拇指按压它是降低 [[http://en.wikipedia.org/wiki/Repetitive_strain_injury][RSI]] 风险的好选择。可以使用变量 =dotspacemacs-leader-key= 和 =dotspacemacs-emacs-leader-key= 对任何其他键进行自定义。

使用 Spacemacs 不需要重新映射您的键盘修改器以尝试降低 RSI 的风险，在 =normal= 模式下通过按 ~SPC~ 前缀键，您可以非常容易地执行每个命令，这里有几个示例：

：SPC fs 保存所有打开的缓冲区：SPC f S 打开（切换）到具有舵位置的缓冲区：SPC bb
-  保存缓冲区： ~SPC f s~
-  保存所有打开的缓冲区： ~SPC f S~
-  打开（切换）到有 =helm= 的缓冲区： ~SPC b b~

** 通用参数
通用参数 ~C-u~ 是 Emacs 中的重要命令，但它也是非常方便的绑定到向上滚动的 Vim 键。

Spacemacs 绑定 ~C-u~ 为 =向上滚动= ，并将通用参数绑定到 ~SPC u~ 。

*注意* ： ~SPC u~ 在 =helm-M-x= （ ~SPC SPC~ ）之前不工作。相反，首先调用 =helm-M-x= ，选择要运行的命令，然后按 ~C-u~ 键，然后按 ~RETURN~ 。例如： ~SPC SPC org-reload C-u RET~

** 瞬态状态
   :PROPERTIES:
   :CUSTOM_ID: transient-states
   :END:
Spacemacs 定义了有意义的各种各样的 =瞬态状态=（临时叠加映射）。这样可以防止在 ~SPC~ 键上重复和繁琐的按压。

当 =瞬态状态= 活跃时，文档将显示在微型缓冲区中。附加信息也可能显示在 minibuffer 中。

Auto-highlight-symbol 瞬态状态：
[[file:img/spacemacs-ahs-transient-state.png]]
[[#text][Text scale transient state]]:

[[file:img/spacemacs-scale-transient-state.png]]

* Vim，Evil 和 Spacemacs 之间的差异
- ~​,​~ 键在 Vim 中以相反方向重复上一个 ~f~, ~t~, ~F~ 或 ~T~ 指令，但在 Spacemacs 中，默认情况下是主模式特定的前缀键（可以在 dotfile 中的另一个键绑定中设置）。

发送 PR，以在本节中增加您发现的差异。

** vim-surround 案例
有一个明显的可见差异。它不是在 =Evil= 和 =Vim= 之间，而是 Spacemacs 和 [[https://github.com/tpope/vim-surround][vim-surround]] 之间：在 visual 模式中，在 =vim-surround= 中 =surround= 命令为 ~S~ ，而在 Spacemacs 中则为 ~s~ 。

这是一些可以让一些 Vim 用户感到惊讶的事情，所以这里有这个变化背后的一些动机：
  - ~s~ 和 ~c~ 在 =visual 模式= 中做同样的事
  - ~s~ 只能删除 /一个/ 字符并添加多个字符，这是一个 /非常/ 狭窄的用例
  - ~c~ 接受移动，能做在 =normal 状态= 下 ~s~ 能做的所有事情（注意，这对于 ~r~ 也是如此，但是 ~r~ 更有用，因为它保持在 =normal 状态= ）
  - =surround= 环绕命令只是一个比 ~s~ 更强大的命令。

如果您不确信，那么这里的代码段将恢复到默认的 =Vim + vim-surround= 设置（将其添加到您的 =dotspacemacs/user-config= 函数或您的 =~/.spacemacs= ）：

#+BEGIN_SRC emacs-lisp
(evil-define-key 'visual evil-surround-mode-map "s" 'evil-substitute)
(evil-define-key 'visual evil-surround-mode-map "S" 'evil-surround-region)
#+END_SRC

* Evil 插件
Spacemacs 附带以下 evil 插件：

| 模式                          | 描述                                   |
|-------------------------------+----------------------------------------|
| [[https://github.com/wcsmith/evil-args][evil-args]]                     | motions and text objects for arguments |
| [[https://github.com/Dewdrops/evil-exchange][evil-exchange]]                 | [[https://github.com/tommcdo/vim-exchange][vim-exchange]] 的移植                    |
| [[https://github.com/cofi/evil-indent-textobject][evil-indent-textobject]]        | 添加基于缩进级别的文本对象             |
| [[https://github.com/redguardtoo/evil-matchit][evil-matchit]]                  | [[http://www.vim.org/scripts/script.php?script_id=39][matchit.vim]] 的移植                     |
| [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]]           | [[https://github.com/scrooloose/nerdcommenter][nerdcommenter]] 的移植                   |
| [[https://github.com/cofi/evil-numbers][evil-numbers]]                  | 类似 vim 中的 ~C-a~ 和 ~C-x~           |
| [[https://github.com/juanjux/evil-search-highlight-persist][evil-search-highlight-persist]] | 模拟 hlsearch 的行为                   |
| [[https://github.com/timcharper/evil-surround][evil-surround]]                 | [[https://github.com/tpope/vim-surround][vim-surround]] 的移植                    |
| [[https://github.com/bling/evil-visualstar][evil-visualstar]]               | 用 ~*~ 搜索当前选中部分                |
| [[https://github.com/jaypei/emacs-neotree][NeoTree]]                       | 模仿 [[https://github.com/scrooloose/nerdtree][NERD Tree]]                         |

* 绑定键
键序列与各种键盘映射中的 Emacs 命令绑定。最基本的映射是 =全局映射= 。在 =全局映射= 中设置键绑定是通过 =global-set-key= 函数实现的。将键绑定到命令 =forward-char= 的示例：

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-]") 'forward-char)
#+END_SRC

=kbd= 宏接受描述键序列的字符串。 =全局映射= 经常被其他映射覆盖。例如， =evil 模式= 定义了目标状态（或 vim 术语中的模式）的键映射。这是一个创建与上述相同的绑定的示例，但只能在 =插入状态= （ =define-key= 是一个内置函数）。 =Evil 模式= 有自己的用来定义键的函数。

#+BEGIN_SRC emacs-lisp
(define-key evil-insert-state-map (kbd "C-]") 'forward-char)
#+END_SRC

也许最重要的是 Spacemacs 是使用 bind-map 包来绑定前缀键后面的键。
这是 Spacemacs 绑定的绝大部分。前缀键后面的绑定键是通过函数 =spacemacs/set-leader-keys= 和 =spacemacs/set-leader-keys-for-major-mode= 实现的，例如：

#+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys "C-]" 'forward-char)
(spacemacs/set-leader-keys-for-major-mode 'emacs-lisp-mode "C-]" 'forward-char)
#+END_SRC

这些函数使用像 =kbd= 这样的宏来为您翻译键序列。第二个函数， =spacemacs/set-leader-keys-for-major-mode= 仅在指定的模式下绑定键。第二个键绑定只有当主模式是 =emacs-lisp= 时才是活跃的。

最后，应该知道前缀键。基本上，所有的键盘映射都可以嵌套。嵌套的键盘映射广泛用于 spacemacs，而在 vanilla Emacs 中也是这样。例如， ~SPC a~ 指向“应用程序”的密钥绑定，例如用于 =calc-dispatch= 的 ~SPC a c~ 。嵌套绑定很容易。

#+BEGIN_SRC emacs-lisp
(spacemacs/declare-prefix "]" "bracket-prefix")
(spacemacs/set-leader-keys "]]" 'double-bracket-command)
#+END_SRC

第一行声明 ~SPC ]~ 作为前缀，第二行将键序列 ~SPC ]]~ 绑定到相应的命令。要创建前缀，第一行实际上不必要，但它会给您的新前缀一个键探测工具可以使用的名称（例如，which-key）。

还有更多关于绑定键要说的，但这些是基础知识。键可以绑定到你的 =~/.spacemacs= 文件或单独的图层中。

* GUI Elements
Spacemacs has a minimalistic and distraction free graphical UI:
  - custom [[https://github.com/milkypostman/powerline][powerline]] mode-line [[Flycheck integration][with color feedback]] according to current [[https://github.com/flycheck/flycheck][Flycheck]] status
  - Unicode symbols for minor mode lighters which appear in the mode-line
  - [[Errors handling][custom fringe bitmaps]] and error feedbacks for [[https://github.com/flycheck/flycheck][Flycheck]]

** Color themes
The official Spacemacs theme is [[https://github.com/nashamri/spacemacs-theme][spacemacs-dark]] and it is the default theme
installed when you first started Spacemacs. There are two variants of the
theme, a dark one and a light one. Some aspects of these themes can be customized
in the function =dotspacemacs/user-init= of your =~/.spacemacs=:
  - the comment background with the boolean =spacemacs-theme-comment-bg=
  - the height of org section titles with =spacemacs-theme-org-height=

It is possible to define your default themes in your =~/.spacemacs= with the
variable =dotspacemacs-themes=. For instance, to specify =spacemacs-light=,
=leuven= and =zenburn=:

#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-themes '(spacemacs-light leuven zenburn))
#+END_SRC

| Key Binding | Description                                           |
|-------------+-------------------------------------------------------|
| ~SPC T n~   | switch to next theme listed in =dotspacemacs-themes=. |
| ~SPC T s~   | select a theme using a =helm= buffer.                 |

You can see samples of all included themes in this [[http://themegallery.robdor.com][theme gallery]] from [[http://www.twitter.com/robmerrell][Rob Merrell]].

*Note*:
  - You don't need to explicitly list in a layer the theme packages you are
    defining in =dotspacemacs-themes=, Spacemacs is smart enough to remove those
    packages from the list of orphans.
  - Due to the inner working of themes in Emacs, switching theme during the same
    session may have some weird side effects. Although these side effects should
    be pretty rare.
  - In the terminal version of Emacs, color themes will not render correctly as
    colors are rendered by the terminal and not by emacs. You will probably have
    to change your terminal color palette. More explanations can be found on
    [[https://github.com/sellout/emacs-color-theme-solarized#important-note-for-terminal-users][emacs-color-theme-solarized webpage]].

*Hint*: If you are an =Org= user, [[https://github.com/fniessen/emacs-leuven-theme][leuven-theme]] is amazing ;-)

** Font
The default font used by Spacemacs is [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]] by Adobe. It is
recommended to install it on your system if you wish to use it.

To change the default font set the variable =dotspacemacs-default-font= in your
=.spacemacs= file. By default its value is:

#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-default-font '("Source Code Pro"
                                          :size 13
                                          :weight normal
                                          :width normal
                                          :powerline-scale 1.1))
#+END_SRC

If the specified font is not found, the fallback one will be used (depends on
your system). Also note that changing this value has no effect if you are
running Emacs in terminal.

The properties should be pretty straightforward, it is possible to set any valid
property of a [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Font.html][font-spec]]:
  - =:family= Font family or fontset (a string).
  - =:width= Relative character width. This should be one of the symbols:
    - ultra-condensed
    - extra-condensed
    - condensed
    - semi-condensed
    - normal
    - semi-expanded
    - expanded
    - extra-expanded
    - ultra-expanded
  - =:height= The height of the font. In the simplest case, this is an integer
    in units of 1/10 point.
  - =:weight= Font weight- one of the symbols (from densest to faintest):
    - ultra-bold
    - extra-bold
    - bold
    - semi-bold
    - normal
    - semi-light
    - light
    - extra-light
    - ultra-light
  - =:slant= Font slant- one of the symbols:
    - italic
    - oblique
    - normal
    - reverse-italic
    - reverse-oblique
  - =:size= The font size- either a non-negative integer that specifies the
    pixel size, or a floating-point number that specifies the point size.
  - =:adstyle= Additional typographic style information for the font, such as
    'sans'. The value should be a string or a symbol.
  - =:registry= The charset registry and encoding of the font, such as
    'iso8859-1'. The value should be a string or a symbol.
  - =:script= The script that the font must support (a symbol).

The special property =:powerline-scale= is Spacemacs specific and it is for
quick tweaking of the mode-line height in order to avoid crappy rendering of the
separators like on the following screenshot (default value is 1.1).

[[file:img/crappy-powerline-separators.png]]
/Ugly separators/

** GUI Toggles
Some graphical UI indicators can be toggled on and off (toggles start with ~t~
and ~T~):

| Key Binding | Description                                                       |
|-------------+-------------------------------------------------------------------|
| ~SPC t 8~   | highlight any character past the 80th column                      |
| ~SPC t f~   | display the fill column (by default the fill column is set to 80) |
| ~SPC t h h~ | toggle highlight of the current line                              |
| ~SPC t h i~ | toggle highlight indentation levels                               |
| ~SPC t h c~ | toggle highlight indentation current column                       |
| ~SPC t h s~ | toggle syntax highlighting                                        |
| ~SPC t i~   | toggle indentation guide at point                                 |
| ~SPC t l~   | toggle truncate lines                                             |
| ~SPC t L~   | toggle visual lines                                               |
| ~SPC t n~   | toggle line numbers                                               |
| ~SPC t v~   | toggle smooth scrolling                                           |

| Key Binding | Description                                                      |
|-------------+------------------------------------------------------------------|
| ~SPC T ~~   | display =~= in the fringe on empty lines                         |
| ~SPC T F~   | toggle frame fullscreen                                          |
| ~SPC T f~   | toggle display of the fringe                                     |
| ~SPC T m~   | toggle menu bar                                                  |
| ~SPC T M~   | toggle frame maximize                                            |
| ~SPC T t~   | toggle tool bar                                                  |
| ~SPC T T~   | toggle frame transparency and enter transparency transient state |

*Note*: These toggles are all available via the =helm-spacemacs-help= interface
(press ~SPC h SPC~ to display the =helm-spacemacs-help= buffer).

**** Global line numbers
Line numbers can be toggled on in all =prog-mode= and =text-mode= buffers by
setting the =dotspacemacs-line-numbers= variable in your =~/.spacemacs= to =t=.

#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-line-numbers t)
#+END_SRC

If it is set to =relative=, line numbers are show in a relative way:

#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-line-numbers 'relative)
#+END_SRC

=dotspacemacs-line-numbers= can also be set to a property list for finer control
over line numbers activation.

Available properties:

| Property              | Description                                                                                  |
|-----------------------+----------------------------------------------------------------------------------------------|
| =:disabled-for-modes= | list of major modes where line numbering is inhibited                                        |
| =:enabled-for-modes=  | disable for all major modes except those listed. Takes precedence over =:disabled-for-modes= |
| =:relative=           | if non-nil, line numbers are relative to the position of the cursor                          |
| =:size-limit-kb=      | size limit in kilobytes after which line numbers are not activated                           |

Examples:

Disable line numbers in dired-mode, doc-view-mode, markdown-mode, org-mode,
pdf-view-mode, text-mode as well as buffers over 1Mb:

#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-lines-numbers '(:relative nil
                                           :disabled-for-modes dired-mode
                                                               doc-view-mode
                                                               markdown-mode
                                                               org-mode
                                                               pdf-view-mode
                                                               text-mode
                                           :size-limit-kb 1000))
#+END_SRC

Relative line numbers only in c-mode and c++ mode with a size limit of =dotspacemacs-large-file-size=:

#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-lines-numbers '(:relative t
                                           :enabled-for-modes c-mode
                                                              c++-mode
                                           :size-limit-kb (* dotspacemacs-large-file-size 1000))
#+END_SRC

Enable line numbers everywhere, except for buffers over 1Mb:

#+BEGIN_SRC emacs-lisp
  (setq-default dotspacemacs-lines-numbers '(:relative nil
                                             :size-limit-kb 1000))
#+END_SRC

Enable line numbers only in programming modes, except for c-mode and c++ mode:

#+BEGIN_SRC emacs-lisp
  (setq-default dotspacemacs-lines-numbers '(:relative nil
                                             :enabled-for-modes prog-mode
                                             :disabled-for-modes c-mode c++-mode
                                             :size-limit-kb (* dotspacemacs-large-file-size 1000))
#+END_SRC

** Mode-line
The mode line is a heavily customized [[https://github.com/milkypostman/powerline][powerline]] with the following capabilities:
  - show the window number
  - color code for current state
  - show the number of search occurrences via anzu
  - toggle flycheck info
  - toggle battery info
  - toggle minor mode lighters

Reminder of the color codes for the states:

| Evil State         | Color     |
|--------------------+-----------|
| Normal             | Orange    |
| Insert             | Green     |
| Visual             | Grey      |
| Emacs              | Blue      |
| Motion             | Purple    |
| Replace            | Chocolate |
| Lisp               | Pink      |
| Iedit/Iedit-Insert | Red       |

Some elements can be dynamically toggled:

| Key Binding | Description                                                     |
|-------------+-----------------------------------------------------------------|
| ~SPC t m b~ | toggle the battery status                                       |
| ~SPC t m c~ | toggle the =org= task clock (available in =org= layer)          |
| ~SPC t m m~ | toggle the minor mode lighters                                  |
| ~SPC t m M~ | toggle the major mode                                           |
| ~SPC t m n~ | toggle the cat! (if =colors= layer is declared in your dotfile) |
| ~SPC t m p~ | toggle the point character position                             |
| ~SPC t m t~ | toggle the time                                                 |
| ~SPC t m T~ | toggle the mode line itself                                     |
| ~SPC t m v~ | toggle the version control info                                 |
| ~SPC t m V~ | toggle the new version lighter                                  |

**** Powerline font installation for terminal-mode users
Users who run Emacs in terminal mode may need to install the [[https://github.com/powerline/fonts][Powerline patched
fonts]] and configure their terminal clients to use them to make the Powerline
separators render correctly.

**** Flycheck integration
When [[https://github.com/flycheck/flycheck][Flycheck]] minor mode is enabled, a new element appears showing the number of
errors, warnings and info.

[[file:img/powerline-wave.png]]
/Flycheck integration in mode-line/

**** Anzu integration
[[https://github.com/syohex/emacs-anzu][Anzu]] shows the number of occurrence when performing a search. Spacemacs
integrates nicely the Anzu status by displaying it temporarily when ~n~ or ~N~
are being pressed. See the =5/6= segment on the screenshot below.

[[file:img/powerline-anzu.png]]
/Anzu integration in mode-line/

**** Battery status integration
[[https://github.com/lunaryorn/fancy-battery.el][fancy-battery]] displays the percentage of total charge of the battery as well as
the time remaining to charge or discharge completely the battery.

A color code is used for the battery status:

| Battery State | Color  |
|---------------+--------|
| Charging      | Green  |
| Discharging   | Orange |
| Critical      | Red    |

Note the these colors may vary depending on your theme.

**** Powerline separators
It is possible to easily customize the =powerline separator= by setting the
=powerline-default-separator= variable in your =~./spacemacs= and then
recompiling the modeline. For instance if you want to set back the separator to
the well-known =arrow= separator add the following snippet to your configuration
file:

#+BEGIN_SRC emacs-lisp
(defun dotspacemacs/user-config ()
  "This is were you can ultimately override default Spacemacs configuration.
This function is called at the very end of Spacemacs initialization."
  (setq powerline-default-separator 'arrow))
#+END_SRC

To save you the time to try all the possible separators provided by the
powerline, here is an exhaustive set of screenshots:

| Separator    | Screenshot                        |
|--------------+-----------------------------------|
| =alternate=  | [[file:img/powerline-alternate.png]]  |
| =arrow=      | [[file:img/powerline-arrow.png]]      |
| =arrow-fade= | [[file:img/powerline-arrow-fade.png]] |
| =bar=        | [[file:img/powerline-bar.png]]        |
| =box=        | [[file:img/powerline-box.png]]        |
| =brace=      | [[file:img/powerline-brace.png]]      |
| =butt=       | [[file:img/powerline-butt.png]]       |
| =chamfer=    | [[file:img/powerline-chamfer.png]]    |
| =contour=    | [[file:img/powerline-contour.png]]    |
| =curve=      | [[file:img/powerline-curve.png]]      |
| =rounded=    | [[file:img/powerline-rounded.png]]    |
| =roundstub=  | [[file:img/powerline-roundstub.png]]  |
| =slant=      | [[file:img/powerline-slant.png]]      |
| =wave=       | [[file:img/powerline-wave.png]]       |
| =zigzag=     | [[file:img/powerline-zigzag.png]]     |
| =nil=        | [[file:img/powerline-nil.png]]        |

**** Minor Modes
Spacemacs uses [[http://www.emacswiki.org/emacs/DiminishedModes][diminish]] mode to reduce the size of minor mode indicators:

The minor mode area can be toggled on and off with ~SPC t m m~

Unicode symbols are displayed by default. Setting the variable
=dotspacemacs-mode-line-unicode-symbols= to =nil= in your =~/.spacemacs= will
display ASCII characters instead (may be useful in terminal if you cannot set an
appropriate font).

The letters displayed in the mode-line correspond to the key bindings used to
toggle them.

Some toggle have two flavors: local and global. The global version of the toggle
can be reached using the =control= key.

| Key Binding | Unicode | ASCII | Mode                                                                 |
|-------------+---------+-------+----------------------------------------------------------------------|
| ~SPC t -~   | =⊝=     | -     | [[http://emacswiki.org/emacs/centered-cursor-mode.el][centered-cursor]]  mode                                                |
| ~SPC t 8~   | =⑧=     | 8     | toggle highlight of characters for long lines                        |
| ~SPC t C-8~ | =⑧=     | 8     | global toggle highlight of characters for long lines                 |
| ~SPC t C--~ | =⊝=     | -     | global centered cursor                                               |
| ~SPC t a~   | =ⓐ=     | a     | auto-completion                                                      |
| ~SPC t c~   | =ⓒ=     | c     | camel case motion with subword mode                                  |
| =none=      | =ⓔ=     | e     | [[https://github.com/edwtjo/evil-org-mode][evil-org]] mode                                                        |
| ~SPC t E e~ | =Ⓔe=    | Ee    | emacs editing style (holy mode)                                      |
| ~SPC t E h~ | =Ⓔh=    | Eh    | hybrid editing style (hybrid mode)                                   |
| ~SPC t f~   | =ⓕ=     | f     | fill-column-indicator mode                                           |
| ~SPC t F~   | =Ⓕ=     | F     | auto-fill mode                                                       |
| ~SPC t g~   | =ⓖ=     | g     | [[https://github.com/roman/golden-ratio.el][golden-ratio]] mode                                                    |
| ~SPC t h i~ | =ⓗi=    | hi    | toggle highlight indentation levels                                  |
| ~SPC t h c~ | =ⓗc=    | hc    | toggle highlight indentation current column                          |
| ~SPC t i~   | =ⓘ=     | i     | indentation guide                                                    |
| ~SPC t C-i~ | =ⓘ=     | i     | global indentation guide                                             |
| ~SPC t I~   | =Ⓘ=     | I     | aggressive indent mode                                               |
| ~SPC t K~   | =Ⓚ=     | K     | which-key mode                                                       |
| ~SPC t p~   | =ⓟ=     | p     | [[https://github.com/Fuco1/smartparens][smartparens]] mode                                                     |
| ~SPC t C-p~ | =ⓟ=     | p     | global smartparens                                                   |
| ~SPC t s~   | =ⓢ=     | s     | syntax checking (flycheck)                                           |
| ~SPC t S~   | =Ⓢ=     | S     | enabled in [[file:../layers/+checkers/spell-checking/README.org][spell checking layer]] (flyspell)                           |
| ~SPC t w~   | =ⓦ=     | w     | whitespace mode                                                      |
| ~SPC t C-w~ | =ⓦ=     | w     | global whitespace                                                    |
| ~SPC t W~   | =Ⓦ=     | W     | automatic whitespace cleanup (see =dotspacemacs-whitespace-cleanup=) |
| ~SPC t C-W~ | =Ⓦ=     | W     | automatic whitespace cleanup globally                                |
| ~SPC t y~   | =ⓨ=     | y     | [[https://github.com/capitaomorte/yasnippet][yasnippet]] mode                                                       |

**** Customizing the mode-line
Spacemacs uses [[https://github.com/TheBB/spaceline][Spaceline]] to provide its mode-line. It consists of a number of
/segments/ arranged on the left and right sides. These are defined in the
variables =spaceline-left= and =spaceline-right=. Segments can be defined using
=spaceline-define-segment=, and added to the appropriate location in the left or
right hand side variables.

Please see the Spaceline documentation for more information.

* Layouts and workspaces
Layouts are window configurations with buffer isolation, each layout can define
several workspaces (think of them as sub-layouts) sharing the same list of
buffers as their parent layout.

** Layouts
A layout is a window configuration associated with a list of buffers. The list
of buffers can be an arbitrarily chosen set of buffers. Spacemacs provides
some facilities to create meaningful sets of buffers, for instance the buffers
related to a projectile project.

The name of the current layout appears in the mode-line at the far left (first
element of the mode-line).

To create a new layout type a layout number that does not exist yet.
For instance if you have two layouts currently then type ~SPC l 3~ to create a
third layout.

*** The default layout
The =default= layout (the layout created at the startup of Emacs) is not
displayed in the mode-line but it is possible to display it by setting the
variable =dotspacemacs-display-default-layout= to =t=.

Its name is "default" by default but it can be changed by setting the variable
=dotspacemacs-default-layout-name=.

The =default= layout is special because it has a global scope which means that
all the opened buffers belong to it. So using only the =default= layout feels
like not using layouts at all.

*** Project layouts
A project layout is bound to a projectile project. To create a project layout
use ~SPC p l~.

The name of the layout is the name of the project root directory.

*** Custom Layouts
Custom layouts can be defined using the macro ~spacemacs|define-custom-layout~,
they are accessible via ~SPC l o~.

By convention the name of a custom layout should start with =@=.

Example of custom layout definition for =ERC= buffers:

#+BEGIN_SRC emacs-lisp
  (spacemacs|define-custom-layout "@ERC"
    :binding "E"
    :body
    (progn
      ;; hook to add all ERC buffers to the layout
      (defun spacemacs-layouts/add-erc-buffer-to-persp ()
        (persp-add-buffer (current-buffer)
                          (persp-get-by-name
                           erc-spacemacs-layout-name)))
      (add-hook 'erc-mode-hook #'spacemacs-layouts/add-erc-buffer-to-persp)
      ;; Start ERC
      (call-interactively 'erc)))
#+END_SRC

Then use ~SPC l o E~ to start ERC inside its own layout. Any new ERC buffer
will be part of the custom layout.

Some custom layouts that ship with Spacemacs:

| Name       | Key Binding | Description                                                                     |
|------------+-------------+---------------------------------------------------------------------------------|
| @Spacemacs | ~e~         | Custom perspective containing all buffers of =~/.emacs.d=                       |
| @ERC       | ~E~         | Custom perspective containing all ERC buffers (needs the erc layer enabled)     |
| @RCIRC     | ~i~         | Custom perspective containing all RCIRC buffers (needs the rcirc layer enabled) |
| @Org       | ~o~         | Custom perspective containing all the =org-agenda= buffers                      |

*** Save/Load layouts into a file
With ~SPC l s~ and ~SPC l L~ you can save and load layouts to/from a file.

*Note:* By default, Spacemacs will automatically save the layouts under the name
=persp-auto-save=.

Setting the variable =dotspacemacs-auto-resume-layouts= to =t= will
automatically resume the last saved layouts.

*** Layout key bindings
The key bindings are registered in a transient state. The docstring of the
transient state displays the existing layouts and the currently active
layout has square brackets. Pressing a layout number will activate it (or
create a new one) and exit the transient state. It is possible to just preview a
layout with ~Ctrl-<number>~. Pressing ~TAB~ will activate the previously
selected layout.

Press ~?~ to toggle the full help.

| Key Binding       | Description                                                |
|-------------------+------------------------------------------------------------|
| ~SPC l~           | activate the transient- state                              |
| ~?~               | toggle the documentation                                   |
| ~[0..9]~          | switch to nth layout                                       |
| ~[C-0..C-9]~      | switch to nth layout and keep the transient state active   |
| ~<tab>~           | switch to the latest layout                                |
| ~a~               | add a buffer to the current layout                         |
| ~A~               | add all the buffers from another layout in the current one |
| ~b~               | select a buffer in the current layout                      |
| ~d~               | delete the current layout and keep its buffers             |
| ~D~               | delete the other layouts and keep their buffers            |
| ~h~               | go to default layout                                       |
| ~C-h~             | previous layout in list                                    |
| ~l~               | select/create a layout with helm                           |
| ~L~               | load layouts from file                                     |
| ~C-l~             | next layout in list                                        |
| ~n~               | next layout in list                                        |
| ~N~               | previous layout in list                                    |
| ~o~               | open a custom layout                                       |
| ~p~               | previous layout in list                                    |
| ~r~               | remove current buffer from layout                          |
| ~R~               | rename current layout                                      |
| ~s~               | save layouts                                               |
| ~t~               | display a buffer without adding it to the current layout   |
| ~w~               | workspaces transient state (needs eyebrowse layer enabled) |
| ~x~               | kill current layout with its buffers                       |
| ~X~               | kill other layouts with their buffers                      |

** Workspaces
Workspaces are sub-layouts, they allow to define multiple layouts into a given
layout, those layouts share the same buffer as the parent layout.

The currently active workspace number is displayed before the window number,
for instance "➊|➍" or "1|4" means the fourth window of the first workspace.

Any new layout comes with a default workspace which is the workspace 1.

Switching to a workspace that does not exist in the current layout will create a
new one. For instance at startup you can press ~SPC l w 2~ to create the
workspace 2 in the =default= layout.

When created a workspace is anonymous, you can give them a name with
~SPC l w R~.

*** Workspace key bindings
The key bindings are registered in a transient state. The docstring of the
transient state displays the existing workspaces and the currently active
workspace has square brackets. Pressing a workspace number will activate it (or
create a new one) and exit the transient state. It is possible to just preview a
workspace with ~Ctrl-<number>~. Pressing ~TAB~ will activate the previously
selected workspace.

Press ~?~ to toggle the full help.

| Key Binding       | Description                                                 |
|-------------------+-------------------------------------------------------------|
| ~SPC l w~         | activate the transient state                                |
| ~?~               | toggle the documentation                                    |
| ~[0..9]~          | switch to nth workspace                                     |
| ~[C-0..C-9]~      | switch to nth workspace and keep the transient state active |
| ~TAB~             | switch to last active workspace                             |
| ~d~               | close current workspace                                     |
| ~n~ or ~l~        | switch to next workspace                                    |
| ~N~ or ~p~ or ~h~ | switch to previous workspace                                |
| ~R~               | set a tag to the current workspace                          |
| ~w~               | switched to tagged workspace                                |

There are also some handy globally available key bindings related to workspaces:

| Key Binding | Description                          |
|-------------+--------------------------------------|
| ~gt~        | go to next workspace                 |
| ~gT~        | go to previous workspace             |
| ~SPC b W~   | go to workspace and window by buffer |

* Commands
** Vim key bindings
Spacemacs is based on =Vim= modal user interface to navigate and edit text. If
you are not familiar with the =Vim= way of editing text you can try the
[[https://github.com/syl20bnr/evil-tutor][evil-tutor]] lessons by pressing ~SPC h T~ at any time.

*** Escaping
Spacemacs uses [[https://github.com/syl20bnr/evil-escape][evil-escape]] to
easily switch between =insert state= and =normal state= by quickly pressing the
~fd~ keys.

The choice of ~fd~ was made to be able to use the same sequence to escape from
"everything" in Emacs:
  - escape from all stock evil states to normal state
  - escape from evil-lisp-state to normal state
  - escape from evil-iedit-state to normal state
  - abort evil ex command
  - quit minibuffer
  - abort isearch
  - quit magit buffers
  - quit help buffers
  - quit apropos buffers
  - quit ert buffers
  - quit undo-tree buffer
  - quit paradox
  - quit gist-list menu
  - quit helm-ag-edit
  - hide neotree buffer

If you find yourself in a buffer where the Spacemacs (~SPC~) or Vim keybindings
don't work you can use this to get back to =normal state= (for example in ~SPC
SPC customize~ press ~fd~ to make ~SPC b b~ work again).

This sequence can be customized in your =~/.spacemacs=.
Example to set it to ~jj~:

#+BEGIN_SRC emacs-lisp
(defun dotspacemacs/user-config ()
  (setq-default evil-escape-key-sequence "jj"))
#+END_SRC

*Note*: Although ~jj~ or ~jk~ are popular choices of vim users, these key
sequences are not optimal for Spacemacs. Indeed it is very easy in =visual
state= to press quickly ~jj~ and inadvertently escape to =normal state=.

*** Executing Vim and Emacs ex/M-x commands

| Command          | Key Binding |
|------------------+-------------|
| Vim (ex-command) | ~:~         |
| Emacs (M-x)      | ~SPC SPC~   |

The emacs command key ~SPC~ (executed after the leader key) can be changed
with the variable =dotspacemacs-emacs-command-key= of your =~/.spacemacs=.

*** Leader key
On top of =Vim= modes (modes are called states in Spacemacs) there is a
special key called the leader key which once pressed gives a whole new keyboard
layer. The leader key is by default ~SPC~ (space). It is possible to change this
key with the variable =dotspacemacs-leader-key=.

*** Additional text objects
Additional text objects are defined in Spacemacs:

| Object  | Description                |
|---------+----------------------------|
| ~a~     | an argument                |
| ~g~     | the entire buffer          |
| ~$~     | text between =$=           |
| ~*~     | text between =*=           |
| ~8~     | text between =/*= and =*/= |
| ~%~     | text between =%=           |
| ~\vert~ | text between =\vert=       |

** Reserved prefix command for user
~SPC o~ and ~SPC m o~ are reserved for the user. Setting key bindings behind
these is *guaranteed* to never conflict with Spacemacs default key bindings.

*Example:* Put =(spacemacs/set-leader-keys "oc" 'org-capture)= inside
=dotspacemacs/user-config= in your =~/.spacemacs= file, to be able to use ~SPC o
c~ to run org mode capture.

** Completion
Spacemacs is powered by one of two incremental completion and selection
narrowing frameworks: [[https://github.com/emacs-helm/helm][Helm]] (default) or [[https://github.com/abo-abo/swiper][Ivy]]. To use Ivy, add the =ivy= layer to
your list of enabled layers. If the =ivy= layer is not enabled, Helm will be
enabled automatically. (Please note that, as Helm is the more mature of the two,
some functions may be unavailable if you choose Ivy.)

These completion systems are the central control towers of Spacemacs, they are
used to manage buffers, projects, search results, configuration layers, toggles
and more...

Mastering your choice of completion system will make you a Spacemacs power user.

*** Helm
Do not hesitate to read the [[https://github.com/emacs-helm/helm/wiki][Helm documentation wiki]].

**** C-z and Tab switch
The command bound to ~C-z~ is much more useful than the one bound to Tab, so it
makes sense to swap them. It's also recommended [[http://tuhdo.github.io/helm-intro.html][here]].

**** Helm focus
If you find yourself unable to return focus to Helm (after a careless
mouse-click for example), use ~SPC w b~ to return focus to the minibuffer.

**** Helm transient state
     :PROPERTIES:
     :CUSTOM_ID: helm-transient-state
     :END:
Spacemacs defines a [[#transient-states][transient state]] for =Helm= to make it work like [[https://github.com/Shougo/unite.vim][Vim's Unite]]
plugin.

Initiate the transient state with ~M-SPC~ or ~s-M-SPC~ while in a =Helm= buffer.

| Key Binding          | Description                                          |
|----------------------+------------------------------------------------------|
| ~M-SPC~ or ~s-M-SPC~ | initiate the transient state                         |
| ~q~                  | quit transient state                                 |
| ~TAB~                | switch to actions page and leave the transient state |
| ~1~                  | execute action 0                                     |
| ~2~                  | execute action 1                                     |
| ~3~                  | execute action 2                                     |
| ~4~                  | execute action 3                                     |
| ~5~                  | execute action 4                                     |
| ~6~                  | execute action 5                                     |
| ~7~                  | execute action 6                                     |
| ~8~                  | execute action 7                                     |
| ~9~                  | execute action 8                                     |
| ~0~                  | execute action 9                                     |
| ~a~                  | switch to actions page                               |
| ~g~                  | go to first candidate                                |
| ~G~                  | go to last candidate                                 |
| ~h~                  | go to previous source                                |
| ~j~                  | select next candidate                                |
| ~k~                  | select previous candidate                            |
| ~l~                  | go to next source                                    |
| ~t~                  | mark current candidate                               |
| ~T~                  | mark all candidates                                  |
| ~v~                  | execute persistent action                            |

*** Ivy
If you choose =ivy= as completion system, make sure to read [[http://oremacs.com/swiper/][official manual]]. In
case you don't want to read everything, at least familiarise with [[http://oremacs.com/swiper/#minibuffer-key-bindings][minibuffer key
bindings]]. Some useful key bindings are presented in following table.

| Key Binding    | Description                                                                                          |
|----------------+------------------------------------------------------------------------------------------------------|
| ~C-m~ or ~RET~ | call default action on current candidate                                                             |
| ~M-o~          | show the list of valid actions on current candidate (then press any of described keys to execute it) |
| ~C-M-m~        | the same as ~RET~ but doesn't close completion minibuffer                                            |
| ~C-M-o~        | the same as ~M-o~ but doesn't close completion minibuffer                                            |
| ~C-'~          | use avy to quickly select completion on current page (sometimes faster than using arrows)            |

** Discovering
*** Key bindings
**** Which-key
A help buffer is displayed each time the ~SPC~ key is pressed in normal mode.
It lists the available key bindings and their associated commands.

By default the [[https://github.com/justbur/emacs-which-key][which-key]] buffer will be displayed quickly after the key has been
pressed. You can change the delay by setting the variable
=dotspacemacs-which-key-delay= to your liking (the value is in second).

**** Helm describe key bindings
It is possible to search for specific key bindings by pressing ~SPC ?~.

To narrow the list to some key bindings using the leader key type a pattern like
this regular expression: ~SPC\ b~ which would list all =buffer= related
bindings.

*** Getting help
=Describe functions= are powerful Emacs introspection commands to get
information about functions, variables, modes etc. These commands are bound
thusly:

| Key Binding | Description                                               |
|-------------+-----------------------------------------------------------|
| ~SPC h d b~ | describe bindings in a =helm= buffer                      |
| ~SPC h d c~ | describe current character under point                    |
| ~SPC h d d~ | describe current expression under point                   |
| ~SPC h d f~ | describe a function                                       |
| ~SPC h d F~ | describe a face                                           |
| ~SPC h d k~ | describe a key                                            |
| ~SPC h d K~ | describe a keymap                                         |
| ~SPC h d l~ | copy last pressed keys that you can paste in gitter chat  |
| ~SPC h d m~ | describe current modes                                    |
| ~SPC h d p~ | describe a package (Emacs built-in function)              |
| ~SPC h d P~ | describe a package (Spacemacs layer information)          |
| ~SPC h d s~ | copy system information that you can paste in gitter chat |
| ~SPC h d t~ | describe a theme                                          |
| ~SPC h d v~ | describe a variable                                       |

Other help key bindings:

| Key Binding | Description                                                        |
|-------------+--------------------------------------------------------------------|
| ~SPC h SPC~ | discover Spacemacs documentation, layers and packages using =helm= |
| ~SPC h i~   | search in info pages with the symbol at point                      |
| ~SPC h k~   | show top-level bindings with =which-key=                           |
| ~SPC h m~   | search available man pages                                         |
| ~SPC h n~   | browse emacs news                                                  |

Navigation key bindings in =help-mode=:

| Key Binding  | Description                                         |
|--------------+-----------------------------------------------------|
| ~g b~ or ~[~ | go back (same as clicking on =[back]= button)       |
| ~g f~ or ~]~ | go forward (same as clicking on =[forward]= button) |
| ~g h~        | go to help for symbol under point                   |

Reporting an issue:

| Key Binding     | Description                                                                              |
|-----------------+------------------------------------------------------------------------------------------|
| ~SPC h I~       | Open Spacemacs GitHub issue page with pre-filled information                             |
| ~SPC u SPC h I~ | Open Spacemacs GitHub issue page with pre-filled information - include last pressed keys |

/Note:/ If these two bindings are used with the =*Backtrace*= buffer open, the
backtrace is automatically included

*** Available layers
All layers can be easily discovered via =helm-spacemacs-help= accessible with
~SPC h SPC~.

The following helm actions are available:
  - default: open the layer =README.org=
  - 2nd: open the layer =packages.el=

**** Available packages in Spacemacs
=helm-spacemacs-help= also lists all the packages available in Spacemacs. The
entry format is =(layer) packages=. If you type =flycheck= you'll be able to see
all the layers where =flycheck= is used.

The following helm actions are available on packages:
  - default: go the package init function

**** New packages from ELPA repositories
=package-list-packages= is where you can browse for all available packages in the
different Elpa repositories. It is possible to upgrade packages from there but
it is not recommended, use the =[Update Packages]= link on the Spacemacs startup
page instead.

Spacemacs uses [[https://github.com/Bruce-Connor/paradox][Paradox]] instead of =package-list-packages= to list available
ELPA packages. Paradox enhances the package list buffer with better feedbacks,
new filters and Github information like the number of stars. Optionally you can
also star packages directly in the buffer.

*Important Note 1*: Installing a new package from =Paradox= won't make it
persistent. To install a package persistently you have to add it explicitly to a
configuration layer.

*Important Note 2*: Don't /update/ your packages from =Paradox= or
=package-list-packages= because they don't support the rollback feature of
Spacemacs.

| Key Binding | Description                                           |
|-------------+-------------------------------------------------------|
| ~SPC a k~   | launch =paradox=                                      |
| ~/~         | evil-search                                           |
| ~f k~       | filter by keywords                                    |
| ~f r~       | filter by regexp                                      |
| ~f u~       | display only installed package with updates available |
| ~h~         | go left                                               |
| ~H~         | show help (not accurate)                              |
| ~j~         | go down                                               |
| ~k~         | go up                                                 |
| ~l~         | go right                                              |
| ~L~         | show last commits                                     |
| ~n~         | next search occurrence                                |
| ~N~         | previous search occurrence                            |
| ~o~         | open package homepage                                 |
| ~r~         | refresh                                               |
| ~S P~       | sort by package name                                  |
| ~S S~       | sort by status (installed, available, etc...)         |
| ~S *~       | sort by Github stars                                  |
| ~v~         | =visual state=                                        |
| ~V~         | =visual-line state=                                   |
| ~x~         | execute (action flags)                                |

*** Toggles
=helm-spacemacs-help= is also a central place to discover the available toggles.
To display only the toggles source press ~C-l~ (or in [[#helm-transient-state][Helm transient state]] you can
press just ~l~).

The following helm actions are available on packages:
  - default: toggle on/off

*Tips* Use ~SPC h l~ to resume the last helm session. It is handy to quickly
toggle on and off a toggle.

** Navigating
*** Point/Cursor
Navigation is performed using the Vi key bindings ~hjkl~.

| Key Binding | Description                                                                       |
|-------------+-----------------------------------------------------------------------------------|
| ~h~         | move cursor left                                                                  |
| ~j~         | move cursor down                                                                  |
| ~k~         | move cursor up                                                                    |
| ~l~         | move cursor right                                                                 |
| ~H~         | move cursor to the top of the screen                                              |
| ~L~         | move cursor to the bottom of the screen                                           |
| ~SPC j 0~   | go to the beginning of line (and set a mark at the previous location in the line) |
| ~SPC j $~   | go to the end of line (and set a mark at the previous location in the line)       |
| ~SPC t -~   | lock the cursor at the center of the screen                                       |

**** Smooth scrolling
[[https://github.com/aspiers/smooth-scrolling][smooth-scrolling]] prevent the point to jump when it reaches the top or
bottom of the screen. It is enabled by default.

On Windows, you may want to disable it. To disable the smooth scrolling set the
=dotspacemacs-smooth-scrolling= variable in your =~/.spacemacs= to =nil=:

#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-smooth-scrolling nil)
#+END_SRC

You can also toggle smooth scrolling with ~SPC t v~.

*** Vim motions with avy
Spacemacs uses the =evil= integration of [[https://github.com/abo-abo/avy][avy]] which enables the
invocation of =avy= during motions.

For instance, it is useful for deleting a set of visual lines from the current line.
Try the following sequence in a buffer containing some text: ~d SPC j l~, followed by
selecting an avy candidate.

| Key Binding | Description                                        |
|-------------+----------------------------------------------------|
| ~SPC j b~   | go back to the previous location (before the jump) |
| ~SPC j j~   | initiate avy jump char                             |
| ~SPC j w~   | initiate avy jump word                             |
| ~SPC j l~   | initiate avy jump line                             |

**** ace-link mode
Similar to =avy=, [[https://github.com/abo-abo/ace-link][ace-link]] allows one to jump to any link in
=help-mode= and =info-mode= with two key strokes.

| Key Binding | Description                                           |
|-------------+-------------------------------------------------------|
| ~o~         | initiate ace link mode in =help-mode= and =info-mode= |

*** Unimpaired bindings
Spacemacs comes with a built-in port of [[https://github.com/tpope/vim-unimpaired][tpope's vim-unimpaired]].

This plugin provides several pairs of bracket maps using ~[~ to denote
previous, and ~]~ as next.

| KeyBindings | Description                      |
|-------------+----------------------------------|
| ~[ SPC~     | Insert space above               |
| ~] SPC~     | Insert space below               |
| ~[ b~       | Go to previous buffer            |
| ~] b~       | Go to next buffer                |
| ~[ f~       | Go to previous file in directory |
| ~] f~       | Go to next file in directory     |
| ~[ l~       | Go to the previous error         |
| ~] l~       | Go to the next error             |
| ~[ h~       | Go to the previous vcs hunk      |
| ~] h~       | Go to the next vcs hunk          |
| ~[ q~       | Go to the previous error         |
| ~] q~       | Go to the next error             |
| ~[ t~       | Go to the previous frame         |
| ~] t~       | Go to the next frame             |
| ~[ w~       | Go to the previous window        |
| ~] w~       | Go to the next window            |
| ~[ e~       | Move line up                     |
| ~] e~       | Move line down                   |
| ~[ p~       | Paste above current line         |
| ~] p~       | Paste below current line         |
| ~g p~       | Select pasted text               |

*** Jumping, Joining and Splitting
The ~SPC j~ prefix is for jumping, joining and splitting.

**** Jumping

| Key Binding | Description                                                                       |
|-------------+-----------------------------------------------------------------------------------|
| ~SPC j 0~   | go to the beginning of line (and set a mark at the previous location in the line) |
| ~SPC j $~   | go to the end of line (and set a mark at the previous location in the line)       |
| ~SPC j b~   | undo a jump (go back to previous location)                                        |
| ~SPC j d~   | jump to a listing of the current directory                                        |
| ~SPC j D~   | jump to a listing of the current directory (other window)                         |
| ~SPC j f~   | jump to the definition of an Emacs Lisp function                                  |
| ~SPC j i~   | jump to a definition in buffer (imenu)                                            |
| ~SPC j I~   | jump to a definition in any buffer (imenu)                                        |
| ~SPC j j~   | jump to a character in the buffer (works as an evil motion)                       |
| ~SPC j J~   | jump to a suite of two characters in the buffer (works as an evil motion)         |
| ~SPC j k~   | jump to next line and indent it using auto-indent rules                           |
| ~SPC j l~   | jump to a line with avy (works as an evil motion)                                 |
| ~SPC j q~   | show the dumb-jump quick look tooltip                                              |
| ~SPC j u~   | jump to a URL in the current buffer                                               |
| ~SPC j v~   | jump to the definition/declaration of an Emacs Lisp variable                      |
| ~SPC j w~   | jump to a word in the current buffer (works as an evil motion)                    |

**** Joining and splitting

| Key Binding | Description                                                              |
|-------------+--------------------------------------------------------------------------|
| ~J~         | join the current line with the next line                                 |
| ~SPC j k~   | go to next line and indent it using auto-indent rules                    |
| ~SPC j n~   | split the current line at point, insert a new line and auto-indent       |
| ~SPC j s~   | split a quoted string or s-expression in place                           |
| ~SPC j S~   | split a quoted string or s-expression, insert a new line and auto-indent |

*** Window manipulation
**** Window manipulation key bindings
Every window has a number displayed at the start of the mode-line and
can be quickly accessed using =SPC number=.

| Key Binding | Description           |
|-------------+-----------------------|
| ~SPC 1~     | go to window number 1 |
| ~SPC 2~     | go to window number 2 |
| ~SPC 3~     | go to window number 3 |
| ~SPC 4~     | go to window number 4 |
| ~SPC 5~     | go to window number 5 |
| ~SPC 6~     | go to window number 6 |
| ~SPC 7~     | go to window number 7 |
| ~SPC 8~     | go to window number 8 |
| ~SPC 9~     | go to window number 9 |
| ~SPC 0~     | go to window number 0 |

Windows manipulation commands (start with ~w~):

| Key Binding            | Description                                                                 |
|------------------------+-----------------------------------------------------------------------------|
| ~SPC w TAB~            | switch to alternate window in the current frame (switch back and forth)     |
| ~SPC w =~              | balance split windows                                                       |
| ~SPC w b~              | force the focus back to the minibuffer (useful with =helm= popups)         |
| ~SPC w c~              | maximize/minimize a window and center it                                    |
| ~SPC w C~              | maximize/minimize a window and center it using [[https://github.com/abo-abo/ace-window][ace-window]]                   |
| ~SPC w d~              | delete a window                                                             |
| ~SPC u SPC w d~        | delete a window and its current buffer (does not delete the file)           |
| ~SPC w D~              | delete another window using [[https://github.com/abo-abo/ace-window][ace-window]]                                      |
| ~SPC u SPC w D~        | delete another window and its current buffer using [[https://github.com/abo-abo/ace-window][ace-window]]               |
| ~SPC w t~              | toggle window dedication (dedicated window cannot be reused by a mode)      |
| ~SPC w f~              | toggle follow mode                                                          |
| ~SPC w F~              | create new frame                                                            |
| ~SPC w h~              | move to window on the left                                                  |
| ~SPC w H~              | move window to the left                                                     |
| ~SPC w j~              | move to window below                                                        |
| ~SPC w J~              | move window to the bottom                                                   |
| ~SPC w k~              | move to window above                                                        |
| ~SPC w K~              | move window to the top                                                      |
| ~SPC w l~              | move to window on the right                                                 |
| ~SPC w L~              | move window to the right                                                    |
| ~SPC w m~              | maximize/minimize a window (maximize is equivalent to delete other windows) |
| ~SPC w M~              | swap windows using [[https://github.com/abo-abo/ace-window][ace-window]]                                               |
| ~SPC w o~              | cycle and focus between frames                                              |
| ~SPC w p m~            | open messages buffer in a popup window                                      |
| ~SPC w p p~            | close the current sticky popup window                                       |
| ~SPC w r~              | rotate windows forward                                                      |
| ~SPC w R~              | rotate windows backward                                                     |
| ~SPC w s~ or ~SPC w -~ | horizontal split                                                            |
| ~SPC w S~              | horizontal split and focus new window                                       |
| ~SPC w u~              | undo window layout (used to effectively undo a closed window)               |
| ~SPC w U~              | redo window layout                                                          |
| ~SPC w v~ or ~SPC w /~ | vertical split                                                              |
| ~SPC w V~              | vertical split and focus new window                                         |
| ~SPC w w~              | cycle and focus between windows                                             |
| ~SPC w W~              | select window using [[https://github.com/abo-abo/ace-window][ace-window]]                                              |

**** Window manipulation transient state
A convenient window manipulation transient state allows performing most of the
actions listed above. The transient state allows additional actions as well like
window resizing.

| Key Binding   | Description                                                   |
|---------------+---------------------------------------------------------------|
| ~SPC w .~     | initiate transient state                                      |
| ~?~           | display the full documentation in minibuffer                  |
| ~0~           | go to window number 0                                         |
| ~1~           | go to window number 1                                         |
| ~2~           | go to window number 2                                         |
| ~3~           | go to window number 3                                         |
| ~4~           | go to window number 4                                         |
| ~5~           | go to window number 5                                         |
| ~6~           | go to window number 6                                         |
| ~7~           | go to window number 7                                         |
| ~8~           | go to window number 8                                         |
| ~9~           | go to window number 9                                         |
| ~/~           | vertical split                                                |
| ~-~           | horizontal split                                              |
| ~[~           | shrink window horizontally                                    |
| ~]~           | enlarge window horizontally                                   |
| ~{~           | shrink window vertically                                      |
| ~}~           | enlarge window vertically                                     |
| ~d~           | delete window                                                 |
| ~D~           | delete other windows                                          |
| ~g~           | toggle =golden-ratio= on and off                              |
| ~h~           | go to window on the left                                      |
| ~j~           | go to window below                                            |
| ~k~           | go to window above                                            |
| ~l~           | go to window on the right                                     |
| ~H~           | move window to the left                                       |
| ~J~           | move window to the bottom                                     |
| ~K~           | move bottom to the top                                        |
| ~L~           | move window to the right                                      |
| ~o~           | focus other frame                                             |
| ~r~           | rotate windows forward                                        |
| ~R~           | rotate windows backward                                       |
| ~s~           | horizontal split                                              |
| ~S~           | horizontal split and focus new window                         |
| ~u~           | undo window layout (used to effectively undo a closed window) |
| ~U~           | redo window layout                                            |
| ~v~           | vertical split                                                |
| ~V~           | horizontal split and focus new window                         |
| ~w~           | focus other window                                            |
| Any other key | leave the transient state                                     |

**** Golden ratio
If you resize windows like crazy you may want to give a try to [[https://github.com/roman/golden-ratio.el][golden-ratio]].

=golden-ratio= resizes windows dynamically depending on whether they are
selected or not. By default =golden-ratio= is off.

The mode can be toggled on and off with ~SPC t g~.

*** Buffers and Files
By default Spacemacs uses =helm= to open files.

**** Buffers manipulation key bindings
Buffer manipulation commands (start with ~b~):

| Key Binding     | Description                                                              |
|-----------------+--------------------------------------------------------------------------|
| ~SPC TAB~       | switch to alternate buffer in the current window (switch back and forth) |
| ~SPC b b~       | switch to a buffer using [[https://github.com/emacs-helm/helm][helm]]                                            |
| ~SPC b d~       | kill the current buffer (does not delete the visited file)               |
| ~SPC u SPC b d~ | kill the current buffer and window (does not delete the visited file)    |
| ~SPC b D~       | kill a visible buffer using [[https://github.com/abo-abo/ace-window][ace-window]]                                   |
| ~SPC u SPC b D~ | kill a visible buffer and its window using [[https://github.com/abo-abo/ace-window][ace-window]]                    |
| ~SPC b C-d~     | kill buffers using a regular expression                                  |
| ~SPC b e~       | erase the content of the buffer (ask for confirmation)                   |
| ~SPC b h~       | open =*spacemacs*= home buffer                                           |
| ~SPC b n~       | switch to next buffer avoiding special buffers                           |
| ~SPC b m~       | kill all buffers except the current one                                  |
| ~SPC u SPC b m~ | kill all buffers and windows except the current one                      |
| ~SPC b M~       | kill all buffers matching the regexp                                     |
| ~SPC b p~       | switch to previous buffer avoiding special buffers                       |
| ~SPC b P~       | copy clipboard and replace buffer (useful when pasting from a browser)   |
| ~SPC b R~       | revert the current buffer (reload from disk)                             |
| ~SPC b s~       | switch to the =*scratch*= buffer (create it if needed)                   |
| ~SPC b w~       | toggle read-only (writable state)                                        |
| ~SPC b Y~       | copy whole buffer to clipboard (useful when copying to a browser)        |
| ~z f~           | Make current function or comments visible in buffer as much as possible  |

**** Buffers manipulation transient state
A convenient buffer manipulation transient state allows to quickly cycles through
the opened buffer and kill them.

| Key Binding   | Description                                   |
|---------------+-----------------------------------------------|
| ~SPC b .~     | initiate transient state                      |
| ~K~           | kill current buffer                           |
| ~n~           | go to next buffer (avoid special buffers)     |
| ~N~           | go to previous buffer (avoid special buffers) |
| Any other key | leave the transient state                     |

**** Special Buffers
:PROPERTIES:
:CUSTOM_ID: special-buffers
:END:
Unlike vim, emacs creates many buffers that most people do not need to see. Some
examples are =*Messages*= and =*Compile-Log*=. Spacemacs tries to automatically
ignore buffers that are not useful. However, you may want to change the way
Spacemacs marks buffers as useful. For instructions, see the [[file:FAQ.org::#change-special-buffer-rules][special buffer howto]].

**** Files manipulations key bindings
Files manipulation commands (start with ~f~):

| Key Binding | Description                                                                                                                     |
|-------------+---------------------------------------------------------------------------------------------------------------------------------|
| ~SPC f b~   | go to file bookmarks                                                                                                            |
| ~SPC f c~   | copy current file to a different location                                                                                       |
| ~SPC f C d~ | convert file from unix to dos encoding                                                                                          |
| ~SPC f C u~ | convert file from dos to unix encoding                                                                                          |
| ~SPC f D~   | delete a file and the associated buffer (ask for confirmation)                                                                  |
| ~SPC f E~   | open a file with elevated privileges (sudo edit)                                                                                |
| ~SPC f f~   | open file with =helm=                                                                                                           |
| ~SPC f F~   | try to open the file under point =helm=                                                                                         |
| ~SPC f h~   | open binary file with =hexl= (a hex editor)                                                                                     |
| ~SPC f j~   | jump to the current buffer file in dired                                                                                        |
| ~SPC f J~   | open a junk file, in mode determined by the file extension provided (defaulting to =fundamental mode=), using =helm= (or =ivy=) |
| ~SPC f l~   | open file literally in =fundamental mode=                                                                                       |
| ~SPC f L~   | Locate a file (using =locate=)                                                                                                  |
| ~SPC f o~   | open a file using the default external program                                                                                  |
| ~SPC f R~   | rename the current file                                                                                                         |
| ~SPC f s~   | save a file                                                                                                                     |
| ~SPC f S~   | save all files                                                                                                                  |
| ~SPC f r~   | open a recent file with =helm=                                                                                                  |
| ~SPC f t~   | toggle file tree side bar using [[https://github.com/jaypei/emacs-neotree][NeoTree]]                                                                                         |
| ~SPC f v d~ | add a directory variable                                                                                                        |
| ~SPC f v f~ | add a local variable to the current file                                                                                        |
| ~SPC f v p~ | add a local variable to the first line of the current file                                                                      |
| ~SPC f y~   | show and copy current file absolute path in the minibuffer                                                                      |

**** Emacs and Spacemacs files
Convenient key bindings are located under the prefix ~SPC f e~ to quickly
navigate between =Emacs= and Spacemacs specific files.

| Key Binding | Description                                                     |
|-------------+-----------------------------------------------------------------|
| ~SPC f e d~ | open the spacemacs dotfile (=~/.spacemacs=)                     |
| ~SPC f e D~ | open =ediff= buffer of =~/.spacemacs= and =.spacemacs.template= |
| ~SPC f e f~ | discover the =FAQ= using =helm=                                 |
| ~SPC f e i~ | open the all mighty =init.el=                                   |
| ~SPC f e l~ | locate an Emacs library                                         |
| ~SPC f e R~ | resync the dotfile with spacemacs                               |
| ~SPC f e v~ | display and copy the spacemacs version                          |

**** Browsing files with Helm
In =vim= and  =hybrid= styles, Spacemacs remap the navigation in Helm find-files
to keep finger on the home row.

| Key Binding | Description                       |
|-------------+-----------------------------------|
| ~C-h~       | go up one level (parent directory |
| ~C-H~       | describe key (replace ~C-h~)      |
| ~C-j~       | go to previous candidate          |
| ~C-k~       | go to next candidate              |
| ~C-l~       | enter current directory           |

*** Ido
Spacemacs displays the =ido= minibuffer vertically thanks to the
[[https://github.com/gempesaw/ido-vertical-mode.el][ido-vertical-mode]].

Basic =ido= operations can be done with ~Ctrl~ key:

| Key Binding        | Description                                       |
|--------------------+---------------------------------------------------|
| ~C-<return>~       | open a =dired buffer=                             |
| ~M-<return>~       | open a =dired buffer= in terminal                 |
| ~C-d~              | delete selected file (ask for confirmation)       |
| ~C-h~              | go to parent directory                            |
| ~C-j~              | select next file or directory                     |
| ~C-k~              | select previous file or directory                 |
| ~C-l~              | open the selected file                            |
| ~C-n~              | select next file or directory                     |
| ~C-o~              | open selected file in other window                |
| ~C-p~              | select previous file or directory                 |
| ~C-s~              | open selected file in a vertically split window   |
| ~C-t~              | open selected file in a new frame                 |
| ~C-v~              | open selected file in a horizontally split window |
| ~C-S-h~            | go to previous directory                          |
| ~C-S-j~ or ~C-S-n~ | next history element                              |
| ~C-S-k~ or ~C-S-p~ | previous history element                          |
| ~C-S-l~            | go to next directory                              |

*** Ido transient state
Spacemacs defines a [[#transient-states][transient state]] for =ido=.

Initiate the transient state with ~M-SPC~ or ~s-M-SPC~ while in an =ido= buffer.

| Key Binding          | Description                           |
|----------------------+---------------------------------------|
| ~M-SPC~ or ~s-M-SPC~ | initiate or leave the transient state |
| ~?~                  | display help                          |
| ~e~                  | open dired                            |
| ~h~                  | delete backward or parent directory   |
| ~j~                  | next match                            |
| ~J~                  | sub directory                         |
| ~k~                  | previous match                        |
| ~K~                  | parent directory                      |
| ~l~                  | select match                          |
| ~n~                  | next directory in history             |
| ~o~                  | open in other window                  |
| ~p~                  | previous directory in history         |
| ~q~                  | quit transient state                  |
| ~s~                  | open in a new horizontal split        |
| ~t~                  | open in other frame                   |
| ~v~                  | open in a new vertical split          |

*** NeoTree file tree
Spacemacs provides a quick and simple way to navigate in an unknown project
file tree with [[https://github.com/jaypei/emacs-neotree][NeoTree]].

To toggle the =NeoTree= buffer press ~SPC f t~ or ~SPC p t~ (the latter open
NeoTree with the root set to the projectile project root).

The NeoTree window always has the number =0= so it does not shift the current
number of the other windows. To select the NeoTree window you then use ~SPC 0~.

VCS integration is supported, the file color will change depending on its
current state. With default =spacemacs-dark= theme:
- green: new file
- purple: modified file

**** NeoTree navigation
Navigation is centered on the ~hjkl~ keys with the hope of providing a fast
navigation experience like in [[http://ranger.nongnu.org/][ranger]]:

| Key Binding  | Description                                                                   |
|--------------+-------------------------------------------------------------------------------|
| ~h~          | collapse expanded directory or go to parent node                              |
| ~H~          | select previous sibling                                                       |
| ~j~          | select next file or directory                                                 |
| ~J~          | select next expanded directory on level down                                  |
| ~k~          | select previous file or directory                                             |
| ~K~          | select parent directory, when reaching the root change it to parent directory |
| ~l~ or ~RET~ | expand directory                                                              |
| ~L~          | select next sibling                                                           |
| ~R~          | make a directory the root directory                                           |

*Note*: Point is automatically set to the first letter of a node for a smoother
experience.

**** Opening files with NeoTree
By default a file is opened in the last active window. It is possible to choose
window number where to open a file by using a numeric argument, for instance ~2
l~ or ~2 RET~ will open the current file in window 2. It is also possible to
open the file in a split window with ~|~ and ~-~:

| Key Binding      | Description                               |
|------------------+-------------------------------------------|
| ~l~ or ~RET~     | open file in last active window           |
| ~# l~ or ~# RET~ | open file in window number =#=            |
| ~¦~              | open file in an vertically split window   |
| ~-~              | open file in an horizontally split window |

**** Other NeoTree key bindings

| Key Binding | Description                     |
|-------------+---------------------------------|
| ~TAB~       | toggle stretching of the buffer |
| ~c~         | create a node                   |
| ~C~         | copy a node                     |
| ~d~         | delete a node                   |
| ~gr~        | refresh                         |
| ~s~         | toggle showing of hidden files  |
| ~q~ or ~fd~ | hide =NeoTree= buffer           |
| ~r~         | rename a node                   |
| ~?~         | show help                       |

**** NeoTree mode-line
The mode-line has the following format =[x/y] d (D:a, F:b)= where:
  - =x= is the index of the current selected file or directory
  - =y= the total number of items (file and directory) in the current directory
  - =d= the name of the current directory
  - =a= the number of directories in the current directory
  - =b= the number of files in the current directory

**** NeoTree Source Control Integration
If you would like NeoTree to show source control information, you can use the
setting =neo-vc-integration=. It is a list containing the possible values:

| Setting | Description                                                               |
|---------+---------------------------------------------------------------------------|
| =face=  | Show information by changing the color of the file/directory name.        |
| =char=  | Show information with a character to the left of the file/directory name. |

The default is =nil= (do not show source control information), which is recommended.

For example,

#+BEGIN_SRC emacs-lisp
(setq neo-vc-integration 'face)
#+END_SRC

*Note*: At this time, it is not recommended to set this to anything other
than =nil=.  Otherwise, it will become very slow with larger source trees.
See https://github.com/jaypei/emacs-neotree/issues/126 for more information.

**** NeoTree Theme
You can change the NeoTree theme by using the setting =neo-theme=.  Possible
values are:

| Setting   | Description                                                      |
|-----------+------------------------------------------------------------------|
| =classic= | Use an icon to display items - only suitable for gui mode.       |
| =ascii=   | The simplest style, it will use =x=, =-= to display fold status. |
| =arrow=   | Use unicode arrows to display fold status.                       |
| =nerd=    | Use the NERDTree indentation mode and arrows.                    |

The default is =classic=.

Use =nerd= if you want it to look most like NERDTree in VIM.  For example:

#+BEGIN_SRC emacs-lisp
(setq neo-theme 'nerd)
#+END_SRC

*** Bookmarks
Bookmarks can be set anywhere in a file. Bookmarks are persistent. They are very
useful to jump to/open a known project. Spacemacs uses =helm-bookmarks= to
manage them.

Open an =helm= window with the current bookmarks by pressing: ~SPC f b~

Then in the =helm-bookmarks= buffer:

| Key Binding | Description                                  |
|-------------+----------------------------------------------|
| ~C-d~       | delete the selected bookmark                 |
| ~C-e~       | edit the selected bookmark                   |
| ~C-f~       | toggle filename location                     |
| ~C-o~       | open the selected bookmark in another window |

To save a new bookmark, just type the name of the bookmark and press ~RET~.

*** DocView mode
=doc-view-mode= is a built-in major mode to view DVI, PostScript (PS), PDF,
OpenDocument, and Microsoft Office documents.

| Key Binding | Description                              |
|-------------+------------------------------------------|
| ~/~         | search forward                           |
| ~?~         | search backward                          |
| ~+~         | enlarge                                  |
| ~-~         | shrink                                   |
| ~gg~        | go to first page                         |
| ~G~         | go to last page                          |
| ~gt~        | go to page number                        |
| ~h~         | previous page                            |
| ~H~         | adjust to height                         |
| ~j~         | next line                                |
| ~k~         | previous line                            |
| ~K~         | kill proc and buffer                     |
| ~l~         | next page                                |
| ~n~         | go to next search occurrence             |
| ~N~         | go to previous search occurrence         |
| ~P~         | fit page to window                       |
| ~r~         | revert                                   |
| ~W~         | adjust to width                          |
| ~C-d~       | scroll down                              |
| ~C-k~       | kill proc                                |
| ~C-u~       | scroll up                                |
| ~C-c C-c~   | toggle display text and image display    |
| ~C-c C-t~   | open new buffer with doc's text contents |

** Auto-saving
*** Frequency of auto-saving
By default auto-saving of files is performed every 300 characters and
every 30 seconds of idle time which can be changed by setting to a
new value the variables =auto-save-interval= and =auto-save-timeout=
respectively.

*** Location of auto-saved files
Auto-save of modified files can be performed in-place on the original file
itself /or/ in the cache directory (in this case the original file will remain
unsaved). By default Spacemacs auto-save the file in the cache directory.

To modify the location set the variable =dotspacemacs-auto-save-file-location=
to =original= or =cache=.

Local files are auto-saved in a sub-directory called =site= in the =cache=
directory whereas remote files (i.e. files edited over TRAMP) are auto-saved
in a sub-directory called =dist=.

*** Disable auto-save
To disable auto-saving set the variable =dotspacemacs-auto-save-file-location=
to =nil=.

You can toggle auto-save in a buffer by calling the command =auto-save-mode=.

** Searching
*** With an external tool
Spacemacs can be interfaced with different search utilities like:
  - ack
  - grep
  - [[https://github.com/ggreer/the_silver_searcher][ag]]
  - [[https://github.com/monochromegane/the_platinum_searcher][pt]]

The search commands in Spacemacs are organized under the ~SPC s~ prefix with the
next key is the tool to use and the last key is the scope. For instance ~SPC s a
b~ will search in all opened buffers using =ag=.

If the last key (determining the scope) is uppercase then the current region or
symbol under point is used as default input for the search. For instance ~SPC s
a B~ will search with symbol under point (if there is no active region).

If the tool key is omitted then a default tool will be automatically selected
for the search. This tool corresponds to the first tool found on the system of
the list =dotspacemacs-search-tools=, the default order is =ag=, =pt=, =ack=
then =grep=. For instance ~SPC s b~ will search in the opened buffers using =pt=
if =ag= has not been found on the system.

The tool keys are:

| Tool | Key |
|------+-----|
| ag   | a   |
| grep | g   |
| ack  | k   |
| pt   | t   |

The available scopes and corresponding keys are:

| Scope                      | Key |
|----------------------------+-----|
| opened buffers             | b   |
| files in a given directory | f   |
| current project            | p   |

It is possible to search in the current file by double tapping the second key
of the sequence, for instance ~SPC s a a~ will search in the current
file with =ag=.

*Notes*:
- =ag= and =pt= are optimized to be used in a source control repository but
  they can be used in an arbitrary directory as well.
- It is also possible to search in several directories at once by marking
  them in the helm buffer.

*Beware* if you use =pt=, [[https://core.tcl.tk/tcllib/doc/trunk/embedded/www/tcllib/files/apps/pt.html][TCL parser tools]] also install a command line tool
called =pt=.

**** Useful key bindings

| Key Binding            | Description                                                   |
|------------------------+---------------------------------------------------------------|
| ~F3~                   | in a =helm= or =ivy= buffer, save results to a regular buffer |
| ~SPC r l~              | resume the last =completion= buffer                           |
| ~SPC r s~ or ~SPC s l~ | resume search buffer (completion or converted search buffer)  |
| ~SPC s `~              | go back to the previous place reached with =helm-ag=          |
| Prefix argument        | will ask for file extensions                                  |

When results have been saved in a regular buffer with ~F3~, that buffer supports
browsing through the matches with Spacemacs’ =next-error= and =previous-error=
bindings (~SPC e n~ and ~SPC e p~) as well as the error transient state (~SPC e~).

**** Searching in current file

| Key Binding | Description                                         |
|-------------+-----------------------------------------------------|
| ~SPC s s~   | search with the first found tool                    |
| ~SPC s S~   | search with the first found tool with default input |
| ~SPC s a a~ | =ag=                                                |
| ~SPC s a A~ | =ag= with default input                             |
| ~SPC s g g~ | =grep=                                              |
| ~SPC s g G~ | =grep= with default input                           |

**** Searching in all open buffers visiting files

| Key Binding | Description                                         |
|-------------+-----------------------------------------------------|
| ~SPC s b~   | search with the first found tool                    |
| ~SPC s B~   | search with the first found tool with default input |
| ~SPC s a b~ | =ag=                                                |
| ~SPC s a B~ | =ag= with default text                              |
| ~SPC s g b~ | =grep=                                              |
| ~SPC s g B~ | =grep= with default text                            |
| ~SPC s k b~ | =ack=                                               |
| ~SPC s k B~ | =ack= with default text                             |
| ~SPC s t b~ | =pt=                                                |
| ~SPC s t B~ | =pt= with default text                              |

**** Searching in files in an arbitrary directory

| Key Binding | Description                                         |
|-------------+-----------------------------------------------------|
| ~SPC s f~   | search with the first found tool                    |
| ~SPC s F~   | search with the first found tool with default input |
| ~SPC s a f~ | =ag=                                                |
| ~SPC s a F~ | =ag= with default text                              |
| ~SPC s g f~ | =grep=                                              |
| ~SPC s g F~ | =grep= with default text                            |
| ~SPC s k f~ | =ack=                                               |
| ~SPC s k F~ | =ack= with default text                             |
| ~SPC s t f~ | =pt=                                                |
| ~SPC s t F~ | =pt= with default text                              |

**** Searching in a project
:PROPERTIES:
:CUSTOM_ID: searching-in-a-project
:END:

| Key Binding           | Description                                         |
|-----------------------+-----------------------------------------------------|
| ~SPC /~  or ~SPC s p~ | search with the first found tool                    |
| ~SPC *~  or ~SPC s P~ | search with the first found tool with default input |
| ~SPC s a p~           | =ag=                                                |
| ~SPC s a P~           | =ag= with default text                              |
| ~SPC s g p~           | =grep= with default text                            |
| ~SPC s k p~           | =ack=                                               |
| ~SPC s k P~           | =ack= with default text                             |
| ~SPC s t p~           | =pt=                                                |
| ~SPC s t P~           | =pt= with default text                              |

*Hint*: It is also possible to search in a project without needing to open a
file beforehand. To do so use ~SPC p p~ and then ~C-s~ on a given project to
directly search into it like with ~SPC s p~.

**** Searching the web

| Key Binding | Description                                                          |
|-------------+----------------------------------------------------------------------|
| ~SPC s w g~ | Get Google suggestions in emacs. Opens Google results in Browser.    |
| ~SPC s w w~ | Get Wikipedia suggestions in emacs. Opens Wikipedia page in Browser. |

*** Persistent highlighting
Spacemacs uses =evil-search-highlight-persist= to keep the searched expression
highlighted until the next search. It is also possible to clear the highlighting
by pressing ~SPC s c~ or executing the ex command =:noh=.

*** Highlight current symbol
Spacemacs supports highlighting of the current symbol on demand (provided by
[[https://github.com/emacsmirror/auto-highlight-symbol][auto-highlight-symbol]] mode) and adds a transient state to easily navigate and rename
this symbol.

It is also possible to change the range of the navigation on the fly to:
  - buffer
  - function
  - visible area

To initiate the highlighting of the current symbol under point press ~SPC s h~.

Navigation between the highlighted symbols can be done with the commands:

| Key Binding | Description                                                                        |
|-------------+------------------------------------------------------------------------------------|
| ~*~         | initiate navigation transient state on current symbol and jump forwards            |
| ~#~         | initiate navigation transient state on current symbol and jump backwards           |
| ~SPC s e~   | edit all occurrences of the current symbol(/)                                      |
| ~SPC s h~   | highlight the current symbol and all its occurrence within the current range       |
| ~SPC s H~   | go to the last searched occurrence of the last highlighted symbol                  |
| ~SPC t h a~ | toggle automatic highlight of symbol under point after =ahs-idle-interval= seconds |

In 'Spacemacs' highlight symbol transient state:

| Key Binding   | Description                                                   |
|---------------+---------------------------------------------------------------|
| ~e~           | edit occurrences (*)                                          |
| ~n~           | go to next occurrence                                         |
| ~N~           | go to previous occurrence                                     |
| ~d~           | go to next definition occurrence                              |
| ~D~           | go to previous definition occurrence                          |
| ~r~           | change range (=function=, =display area=, =whole buffer=)     |
| ~R~           | go to home occurrence (reset position to starting occurrence) |
| Any other key | leave the navigation transient state                          |

(*) using [[https://github.com/tsdh/iedit][iedit]] or the default implementation
of =auto-highlight-symbol=

The transient state text in minibuffer display the following information:

#+BEGIN_EXAMPLE
    <M> [6/11]* press (n/N) to navigate, (e) to edit, (r) to change range or (R)
    for reset
#+END_EXAMPLE

Where =<M> [x/y]*= is:
  - M: the current range mode
  - =<B>=: whole buffer range
  - =<D>=: current display range
  - =<F>=: current function range
  - =x=: the index of the current highlighted occurrence
  - =y=: the total number of occurrences
  - =*=: appears if there is at least one occurrence which is not currently visible.

*** Visual Star
With [[https://github.com/bling/evil-visualstar][evil-visualstar]] you can search for the next occurrence of the current
selection.

It is pretty useful combined with the [[#expand-region][expand-region]] bindings.

*Note*: If the current state is not the =visual state= then pressing ~*~ uses
auto-highlight-symbol and its transient state.

*** Listing symbols by semantic
Use =helm-semantic-or-imenu= command from =Helm= to quickly navigate between the
symbols in a buffer.

To list all the symbols of a buffer press: ~SPC s j~

*** Helm-swoop
This is very similar to =moccur=, it displays a =helm= buffer with all the
occurrences of the word under point. You can then change the search query in
real-time and navigate between them easily.

You can even edit the occurrences directly in the =helm= buffer and apply the
modifications to the buffer.

| Key Binding | Description                    |
|-------------+--------------------------------|
| ~SPC s s~   | execute =helm-swoop=           |
| ~SPC s S~   | execute =helm-multi-swoop=     |
| ~SPC s C-s~ | execute =helm-multi-swoop-all= |

** Editing
*** Paste text
**** Paste Transient-state
The paste transient state can be enabled by settings the variable
=dotspacemacs-enable-paste-transient-state= to =t=. By default it is disabled.

When the transient state is enabled, pressing ~p~ again will replace the pasted text
with the previous yanked (copied) text on the kill ring.

For example if you copy =foo= and =bar= then press ~p~ the text =bar= will
be pasted, pressing ~p~ again will replace =bar= with =foo=.

| Key Binding   | Description                                                                   |
|---------------+-------------------------------------------------------------------------------|
| ~p~ or ~P~    | paste the text before or after point and initiate the =paste= transient state |
| ~C-j~         | in transient state: replace paste text with the previously copied one         |
| ~C-k~         | in transient state: replace paste text with the next copied one               |
| Any other key | leave the transient state                                                     |

**** Auto-indent pasted text
By default any pasted text will be auto-indented. To paste text un-indented use
the universal argument.

It is possible to disable the auto-indentation for specific major-modes by
adding a major-mode to the variable =spacemacs-indent-sensitive-modes= in your
=dotspacemacs/user-config= function.

*** Text manipulation commands
Text related commands (start with ~x~):

| Key Binding | Description                                                   |
|-------------+---------------------------------------------------------------|
| ~SPC x a &~ | align region at &                                             |
| ~SPC x a (~ | align region at (                                             |
| ~SPC x a )~ | align region at )                                             |
| ~SPC x a ​,​~ | align region at ,                                             |
| ~SPC x a .~ | align region at . (for numeric tables)                        |
| ~SPC x a :~ | align region at :                                             |
| ~SPC x a ;~ | align region at ;                                             |
| ~SPC x a =~ | align region at =                                             |
| ~SPC x a a~ | align region (or guessed section) using default rules         |
| ~SPC x a c~ | align current indentation region using default rules          |
| ~SPC x a r~ | align region using user-specified regexp                      |
| ~SPC x a m~ | align region at arithmetic operators (+-*/)                   |
| ~SPC x a ¦~ | align region at ¦                                             |
| ~SPC x c~   | count the number of chars/words/lines in the selection region |
| ~SPC x d w~ | delete trailing whitespaces                                   |
| ~SPC x g l~ | set languages used by translate commands                      |
| ~SPC x g t~ | translate current word using Google Translate                 |
| ~SPC x g T~ | reverse source and target languages                           |
| ~SPC x j c~ | set the justification to center                               |
| ~SPC x j f~ | set the justification to full                                 |
| ~SPC x j l~ | set the justification to left                                 |
| ~SPC x j n~ | set the justification to none                                 |
| ~SPC x j r~ | set the justification to right                                |
| ~SPC x J~   | move down a line of text (enter transient state)              |
| ~SPC x K~   | move up a line of text (enter transient state)                |
| ~SPC x l d~ | duplicate line or region                                      |
| ~SPC x l s~ | sort lines                                                    |
| ~SPC x l u~ | uniquify lines                                                |
| ~SPC x o~   | use avy to select a link in the frame and open it             |
| ~SPC x O~   | use avy to select multiple links in the frame and open them   |
| ~SPC x t c~ | swap (transpose) the current character with the previous one  |
| ~SPC x t w~ | swap (transpose) the current word with the previous one       |
| ~SPC x t l~ | swap (transpose) the current line with the previous one       |
| ~SPC x u~   | set the selected text to lower case                           |
| ~SPC x U~   | set the selected text to upper case                           |
| ~SPC x w c~ | count the number of occurrences per word in the select region |
| ~SPC x w d~ | show dictionary entry of word from wordnik.com                |
| ~SPC x TAB~ | indent or dedent a region rigidly                             |

*** Text insertion commands
Text insertion commands (start with ~i~):

| Key binding | Description                                                           |
|-------------+-----------------------------------------------------------------------|
| ~SPC i l l~ | insert lorem-ipsum list                                               |
| ~SPC i l p~ | insert lorem-ipsum paragraph                                          |
| ~SPC i l s~ | insert lorem-ipsum sentence                                           |
| ~SPC i u~   | Search for Unicode characters and insert them into the active buffer. |
| ~SPC i U 1~ | insert UUIDv1 (use universal argument to insert with CID format)      |
| ~SPC i U 4~ | insert UUIDv4 (use universal argument to insert with CID format)      |
| ~SPC i U U~ | insert UUIDv4 (use universal argument to insert with CID format)      |

*** Smartparens Strict mode
[[https://github.com/Fuco1/smartparens][Smartparens]] comes with a strict mode which prevents deletion of parenthesis if
the result is unbalanced.

This mode can be frustrating for novices, this is why it is not enabled by
default.

It is possible to enable it easily for /all programming modes/ with the variable
=dotspacemacs-smartparens-strict-mode= of you =~/.spacemacs=.

#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-smartparens-strict-mode t)
#+END_SRC

*** Zooming
**** Text
     :PROPERTIES:
     :CUSTOM_ID: text
     :END:
The font size of the current buffer can be adjusted with the commands:

| Key Binding   | Description                                                                    |
|---------------+--------------------------------------------------------------------------------|
| ~SPC z x +~   | scale up the font and initiate the font scaling transient state                |
| ~SPC z x =~   | scale up the font and initiate the font scaling transient state                |
| ~SPC z x -~   | scale down the font and initiate the font scaling transient state              |
| ~SPC z x 0~   | reset the font size (no scaling) and initiate the font scaling transient state |
| ~+~           | increase the font size                                                         |
| ~=~           | increase the font size                                                         |
| ~-~           | decrease the font size                                                         |
| ~0~           | reset the font size                                                            |
| Any other key | leave the font scaling transient state                                         |

Note that /only/ the text of the current buffer is scaled, the other buffers,
the mode-line and the minibuffer are not affected. To zoom the whole content of
a frame use the =zoom frame= bindings (see next section).

**** Frame
You can zoom in and out the whole content of the frame with the commands:

| Key Binding   | Description                                                                 |
|---------------+-----------------------------------------------------------------------------|
| ~SPC z f +~   | zoom in the frame content and initiate the frame scaling transient state    |
| ~SPC z f =~   | zoom in the frame content and initiate the frame scaling transient state    |
| ~SPC z f -~   | zoom out the frame content and initiate the frame scaling transient state   |
| ~SPC z f 0~   | reset the frame content size and initiate the frame scaling transient state |
| ~+~           | zoom in                                                                     |
| ~=~           | zoom in                                                                     |
| ~-~           | zoom out                                                                    |
| ~0~           | reset zoom                                                                  |
| Any other key | leave the zoom frame transient state                                        |

*** Increase/Decrease numbers
Spacemacs uses [[https://github.com/cofi/evil-numbers][evil-numbers]] to easily increase or decrease numbers.

| Key Binding | Description                                                         |
|-------------+---------------------------------------------------------------------|
| ~SPC n +~   | increase the number under point by one and initiate transient state |
| ~SPC n -~   | decrease the number under point by one and initiate transient state |

In transient state:

| Key Binding   | Description                            |
|---------------+----------------------------------------|
| ~+~           | increase the number under point by one |
| ~-~           | decrease the number under point by one |
| Any other key | leave the transient state              |

*Tips:* you can increase or decrease a value by more that once by using a prefix
argument (i.e. ~10 SPC n +~ will add 10 to the number under point).

*** Spell checking
Spell checking is enabled by including the [[file:../layers/+checkers/spell-checking/README.org][spell
checking]] layer in your dotfile.

Keybindings are listed in the layer documentation.

*** Region selection
Vi =Visual= modes are all supported by =evil=.

**** Expand-region
:PROPERTIES:
:CUSTOM_ID: expand-region
:END:
Spacemacs adds another =Visual= mode via the [[https://github.com/magnars/expand-region.el][expand-region]] mode.

| Key Binding | Description                              |
|-------------+------------------------------------------|
| ~SPC v~     | initiate expand-region mode then...      |
| ~v~         | expand the region by one semantic unit   |
| ~V~         | contract the region by one semantic unit |
| ~r~         | reset the region to initial selection    |
| ~ESC~       | leave expand-region mode                 |

**** Indent text object
With [[https://github.com/TheBB/evil-indent-plus][evil-indent-plus]] the following text objects are available:

- ~ii~ - Inner Indentation: the surrounding textblock with the same indentation
- ~iI~ - Above and Indentation: ~ii~ + the line above with a different indentation
- ~iJ~ - Above, Below and Indentation+: ~iI~ + the line below with a different indentation

There are also ~a~ variants that include whitespace. Example (=|= indicates point):

#+BEGIN_SRC emacs-lisp
  (while (not done)
    (messa|ge "All work and no play makes Jack a dull boy."))
  (1+ 41)
#+END_SRC

-  ~vii~ will select the line with message
-  ~viI~ will select the whole while loop
-  ~viJ~ will select the whole fragment

*** Region narrowing
The displayed text of a buffer can be narrowed with the commands (start with
~n~):

| Key Binding | Description                                |
|-------------+--------------------------------------------|
| ~SPC n f~   | narrow the buffer to the current function  |
| ~SPC n p~   | narrow the buffer to the visible page      |
| ~SPC n r~   | narrow the buffer to the selected text     |
| ~SPC n w~   | widen, i.e. show the whole buffer again    |

*** Replacing text with iedit
    :PROPERTIES:
    :CUSTOM_ID: replacing-text-with-iedit
    :END:
Spacemacs uses the powerful [[https://github.com/tsdh/iedit][iedit]] mode through [[https://github.com/syl20bnr/evil-iedit-state][evil-iedit-state]] to quickly
edit multiple occurrences of a symbol or selection.

=evil-iedit-state= defines two new evil states:
  - =iedit state=
  - =iedit-insert state=

The color code for these states is =red=.

=evil-iedit-state= has also a nice integration with [[https://github.com/magnars/expand-region.el][expand-region]] for quick
editing of the currently selected text by pressing ~e~.

**** iedit states key bindings
***** State transitions

| Key Binding | From             | To     |
|-------------+------------------+--------|
| ~SPC s e~   | normal or visual | iedit  |
| ~e~         | expand-region    | iedit  |
| ~ESC~       | iedit            | normal |
| ~C-g~       | iedit            | normal |
| ~fd~        | iedit            | normal |
| ~ESC~       | iedit-insert     | iedit  |
| ~C-g~       | iedit-insert     | normal |
| ~fd~        | iedit-insert     | normal |

To sum-up, in =iedit-insert state= you have to press ESC twice to go back to the
=normal state=. You can also at any time press ~C-g~ or ~fd~ to return to =normal
state=.

*Note*: evil commands which switch to =insert state= will switch in
=iedit-insert state=.

***** In iedit state
=iedit state= inherits from =normal state=, the following key bindings are
specific to =iedit state=.

| Key Binding | Description                                                                             |
|-------------+-----------------------------------------------------------------------------------------|
| ~ESC~       | go back to =normal state=                                                               |
| ~TAB~       | toggle current occurrence                                                               |
| ~0~         | go to the beginning of the current occurrence                                           |
| ~$~         | go to the end of the current occurrence                                                 |
| ~#~         | prefix all occurrences with an increasing number (SPC u to choose the starting number). |
| ~A~         | go to the end of the current occurrence and switch to =iedit-insert state=              |
| ~D~         | delete the occurrences                                                                  |
| ~F~         | restrict the scope to the function                                                      |
| ~gg~        | go to first occurrence                                                                  |
| ~G~         | go to last occurrence                                                                   |
| ~I~         | go to the beginning of the current occurrence and switch to =iedit-insert state=        |
| ~J~         | increase the editing scope by one line below                                            |
| ~K~         | increase the editing scope by one line above                                            |
| ~L~         | restrict the scope to the current line                                                  |
| ~n~         | go to next occurrence                                                                   |
| ~N~         | go to previous occurrence                                                               |
| ~p~         | replace occurrences with last yanked (copied) text                                      |
| ~S~         | (substitute) delete the occurrences and switch to =iedit-insert state=                  |
| ~V~         | toggle visibility of lines with no occurrence                                           |
| ~U~         | Up-case the occurrences                                                                 |
| ~C-U~       | down-case the occurrences                                                               |

*Note*: ~0~, ~$~, ~A~ and ~I~ have the default Vim behavior when used outside of
an ~occurrence~.

***** In iedit-insert state

| Key Binding | Description               |
|-------------+---------------------------|
| ~ESC~       | go back to =iedit state=  |
| ~C-g~       | go back to =normal state= |

**** Examples
-  manual selection of several words then replace: ~v w w SPC s e S "toto" ESC ESC~
-  append text to a word on two lines: ~v i w SPC s e J i "toto" ESC ESC~
-  substitute symbol /with expand-region/: ~SPC v v e S "toto" ESC ESC~
-  replace symbol with yanked (copied) text /with expand region/: ~SPC v
   e p ESC ESC~

*** Replacing text in several files
If you have =ag=, =pt= or =ack= installed, replacing an occurrence of text in
several files can be performed via [[https://github.com/syohex/emacs-helm-ag][helm-ag]].

Say you want to replace all =foo= occurrences by =bar= in your current
project:
  - initiate a search with ~SPC /~
  - enter in edit mode with ~C-c C-e~
  - go to the occurrence and enter in =iedit state= with ~SPC s e~
  - edit the occurrences then leave the =iedit state=
  - press ~C-c C-c~

*Note*: In Spacemacs, =helm-ag= despite its name works with =ack= and =pt= as
well (but not with =grep=).

*** Renaming files in a directory
It is possible to batch rename files in a directory using =wdired= from an
=helm= session:
- browse for a directory using ~SPC f f~
- enter =wdired= with ~C-c C-e~
- edit the file names and use ~C-c C-c~ to confirm the changes
- use ~C-c C-k~ to abort any changes

*** Commenting
Comments are handled by [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]], it's bound to the following keys.

| Key Binding | Description               |
|-------------+---------------------------|
| ~SPC ;~     | comment operator          |
| ~SPC c h~   | hide/show comments        |
| ~SPC c l~   | comment lines             |
| ~SPC c L~   | invert comment lines      |
| ~SPC c p~   | comment paragraphs        |
| ~SPC c P~   | invert comment paragraphs |
| ~SPC c t~   | comment to line           |
| ~SPC c T~   | invert comment to line    |
| ~SPC c y~   | comment and yank          |
| ~SPC c Y~   | invert comment and yank   |

*Tips:* To comment efficiently a block of line use the combo ~SPC ; SPC j l~

*** Regular expressions
Spacemacs uses the packages [[https://github.com/joddie/pcre2el][pcre2el]] to manipulate regular expressions. It is
useful when working with =Emacs Lisp= buffers since it allows to easily converts
=PCRE= (Perl Compatible RegExp) to Emacs RegExp or =rx=. It can also be used to
"explain" a PCRE RegExp around point in =rx= form.

The key bindings start with ~SPC x r~ and have the following mnemonic structure:

- ~SPC x r <source> <target>~ convert from source to target
- ~SPC x r~ do what I mean

| Key Binding   | Function                                                                               |
|---------------+----------------------------------------------------------------------------------------|
| ~SPC x r /~   | Explain the regexp around point with =rx=                                              |
| ~SPC x r '​~   | Generate strings given by a regexp given this list is finite                           |
| ~SPC x r t~   | Replace regexp around point by the =rx= form or vice versa                             |
| ~SPC x r x~   | Convert regexp around point in =rx= form  and display the result in the minibuffer     |
| ~SPC x r c~   | Convert regexp around point to the other form and display the result in the minibuffer |
| ~SPC x r e /~ | Explain Emacs Lisp regexp                                                              |
| ~SPC x r e '​~ | Generate strings from Emacs Lisp regexp                                                |
| ~SPC x r e p~ | Convert Emacs Lisp regexp to PCRE                                                      |
| ~SPC x r e t~ | Replace Emacs Lisp regexp by =rx= form or vice versa                                   |
| ~SPC x r e x~ | Convert Emacs Lisp regexp to =rx= form                                                 |
| ~SPC x r p /~ | Explain PCRE regexp                                                                    |
| ~SPC x r p '​~ | Generate strings from PCRE regexp                                                      |
| ~SPC x r p e~ | Convert PCRE regexp to Emacs Lisp                                                      |
| ~SPC x r p x~ | Convert PCRE to =rx= form                                                              |

*** Deleting files
Deletion is configured to send deleted files to system trash.

On OS X the =trash= program is required. It can be installed with [[http:www.brew.sh][homebrew]] with
the following command:

#+BEGIN_SRC sh
$ brew install trash
#+END_SRC

To disable the trash you can set the variable =delete-by-moving-to-trash= to
=nil= in your =~/.spacemacs=.

*** Editing Lisp code
    :PROPERTIES:
    :CUSTOM_ID: editing-lisp-code
    :END:
Editing of lisp code is provided by [[https://github.com/syl20bnr/evil-lisp-state][evil-lisp-state]].

Commands will set the current state to =lisp state= where different commands
combo can be repeated without pressing on ~SPC k~.

When in =lisp state= the color of the mode-line changes to pink.

Examples:
  - to slurp three times while in normal state: ~SPC k 3 s~
  - to wrap a symbol in parentheses then slurp two times: ~SPC k w 2 s~

*Note*: The =lisp state= commands are available in /any/ modes! Try it out.

**** Lisp Key Bindings
***** Lisp state key bindings
These commands automatically switch to =lisp state=.

| Key Binding | Function                                                            |
|-------------+---------------------------------------------------------------------|
| ~SPC k %~   | evil jump item                                                      |
| ~SPC k :~   | ex command                                                          |
| ~SPC k (~   | insert expression before (same level as current one)                |
| ~SPC k )~   | insert expression after (same level as current one)                 |
| ~SPC k $~   | go to the end of current sexp                                       |
| ~SPC k ` k~ | hybrid version of push sexp (can be used in non lisp dialects)      |
| ~SPC k ` p~ | hybrid version of push sexp (can be used in non lisp dialects)      |
| ~SPC k ` s~ | hybrid version of slurp sexp (can be used in non lisp dialects)     |
| ~SPC k ` t~ | hybrid version of transpose sexp (can be used in non lisp dialects) |
| ~SPC k 0~   | go to the beginning of current sexp                                 |
| ~SPC k a~   | absorb expression                                                   |
| ~SPC k b~   | forward barf expression                                             |
| ~SPC k B~   | backward barf expression                                            |
| ~SPC k c~   | convolute expression                                                |
| ~SPC k ds~  | delete symbol                                                       |
| ~SPC k Ds~  | backward delete symbol                                              |
| ~SPC k dw~  | delete word                                                         |
| ~SPC k Dw~  | backward delete word                                                |
| ~SPC k dx~  | delete expression                                                   |
| ~SPC k Dx~  | backward delete expression                                          |
| ~SPC k e~   | unwrap current expression and kill all symbols after point          |
| ~SPC k E~   | unwrap current expression and kill all symbols before point         |
| ~SPC k h~   | previous symbol                                                     |
| ~SPC k H~   | go to previous sexp                                                 |
| ~SPC k i~   | switch to =insert state=                                            |
| ~SPC k I~   | go to beginning of current expression and switch to =insert state=  |
| ~SPC k j~   | next closing parenthesis                                            |
| ~SPC k J~   | join expression                                                     |
| ~SPC k k~   | previous opening parenthesis                                        |
| ~SPC k l~   | next symbol                                                         |
| ~SPC k L~   | go to next sexp                                                     |
| ~SPC k p~   | paste after                                                         |
| ~SPC k P~   | paste before                                                        |
| ~SPC k r~   | raise expression (replace parent expression by current one)         |
| ~SPC k s~   | forward slurp expression                                            |
| ~SPC k S~   | backward slurp expression                                           |
| ~SPC k t~   | transpose expression                                                |
| ~SPC k u~   | undo                                                                |
| ~SPC k U~   | got to parent sexp backward                                         |
| ~SPC k C-r~ | redo                                                                |
| ~SPC k v~   | switch to =visual state=                                            |
| ~SPC k V~   | switch to =visual line state=                                       |
| ~SPC k C-v~ | switch to =visual block state=                                      |
| ~SPC k w~   | wrap expression with parenthesis                                    |
| ~SPC k W~   | unwrap expression                                                   |
| ~SPC k y~   | copy expression                                                     |

***** Emacs lisp specific key bindings

| Key Binding | Function                                   |
|-------------+--------------------------------------------|
| ~SPC m e $~ | go to end of line and evaluate last sexp   |
| ~SPC m e b~ | evaluate buffer                            |
| ~SPC m e c~ | evaluate current form (a =def= or a =set=) |
| ~SPC m e e~ | evaluate last sexp                         |
| ~SPC m e f~ | evaluate current defun                     |
| ~SPC m e l~ | go to end of line and evaluate last sexp   |
| ~SPC m e r~ | evaluate region                            |

| Key Binding | Function                                           |
|-------------+----------------------------------------------------|
| ~SPC m g g~ | go to definition                                   |
| ~SPC m g G~ | go to definition in another window                 |
| ~SPC m h h~ | describe elisp thing at point (show documentation) |
| ~SPC m t b~ | execute buffer tests                               |
| ~SPC m t q~ | ask for test function to execute                   |

*** Mouse usage
There are some added mouse features set for the line number margin (if shown):

- single click in line number margin visually selects the entire line
- drag across line number margin visually selects the region
- double click in line number margin visually select the current code block

** Managing projects
Projects in Spacemacs are managed with [[https://github.com/bbatsov/projectile][projectile]]. In =projectile= projects
are defined implicitly, for instance the root of a project is found when a
=.git= repository or =.projectile= file is encountered in the file tree.

=Helm= is used whenever it is possible.

To search in a project see [[#searching-in-a-project][project searching]].

=projectile= commands start with p:

| Key Binding | Description                                             |
|-------------+---------------------------------------------------------|
| ~SPC p '​~   | open a shell in project's root (with the =shell= layer) |
| ~SPC p !~   | run shell command in project's root                     |
| ~SPC p &~   | run async shell command in project's root               |
| ~SPC p %~   | replace a regexp                                        |
| ~SPC p a~   | toggle between implementation and test                  |
| ~SPC p b~   | switch to project buffer                                |
| ~SPC p c~   | compile project using =projectile=                      |
| ~SPC p d~   | find directory                                          |
| ~SPC p D~   | open project root in =dired=                            |
| ~SPC p f~   | find file                                               |
| ~SPC p F~   | find file based on path around point                    |
| ~SPC p g~   | find tags                                               |
| ~SPC p G~   | regenerate the project's =etags= / =gtags=              |
| ~SPC p h~   | find file using =helm=                                  |
| ~SPC p I~   | invalidate the projectile cache                         |
| ~SPC p k~   | kill all project buffers                                |
| ~SPC p o~   | run =multi-occur=                                       |
| ~SPC p p~   | switch project                                          |
| ~SPC p r~   | open a recent file                                      |
| ~SPC p R~   | replace a string                                        |
| ~SPC p t~   | open =NeoTree= in =projectile= root                     |
| ~SPC p T~   | test project                                            |
| ~SPC p v~   | open project root in =vc-dir= or =magit=                |
| ~SPC /~     | search in project with the best search tool available   |
| ~SPC s p~   | see [[#searching-in-a-project][searching in a project]]                              |
| ~SPC s a p~ | run =ag=                                                |
| ~SPC s g p~ | run =grep=                                              |
| ~SPC s k p~ | run =ack=                                               |
| ~SPC s t p~ | run =pt=                                                |

*Note for Windows Users*: To enable fast indexing the GNU ~find~ or
Cygwin ~find~ must be in your ~PATH~.

** Registers
Access commands to the various registers start with =r=:

| Key Binding | Description                        |
|-------------+------------------------------------|
| ~SPC r e~   | show evil yank and named registers |
| ~SPC r m~   | show marks register                |
| ~SPC r r~   | show helm register                 |
| ~SPC r y~   | show kill ring                     |

** Errors handling
Spacemacs uses [[https://github.com/flycheck/flycheck][Flycheck]] to gives error feedback on the fly. The checks are
only performed at save time by default.

Errors management commands (start with ~e~):

| Key Binding | Description                                                           |
|-------------+-----------------------------------------------------------------------|
| ~SPC t s~   | toggle flycheck                                                       |
| ~SPC e c~   | clear all errors                                                      |
| ~SPC e h~   | describe a flycheck checker                                           |
| ~SPC e l~   | toggle the display of the =flycheck= list of errors/warnings          |
| ~SPC e n~   | go to the next error                                                  |
| ~SPC e p~   | go to the previous error                                              |
| ~SPC e v~   | verify flycheck setup (useful to debug 3rd party tools configuration) |
| ~SPC e .~   | error transient state                                                 |

The next/previous error bindings and the error transient state can be used to
browse errors from flycheck as well as errors from compilation buffers, and
indeed anything that supports Emacs’ =next-error= API. This includes for example
search results that have been saved to a separate buffer.

Custom fringe bitmaps:

| Symbol                   | Description |
|--------------------------+-------------|
| [[file:img/dot-error.png]]   | Error       |
| [[file:img/dot-warning.png]] | warning     |
| [[file:img/dot-info.png]]    | Info        |

** Compiling
Spacemacs binds a few commands to support compiling a project.

   | Key Binding | Description                    |
   |-------------+--------------------------------|
   | ~SPC c c~   | use =helm-make= via projectile |
   | ~SPC c C~   | compile                        |
   | ~SPC c d~   | close compilation window       |
   | ~SPC c k~   | kill compilation               |
   | ~SPC c m~   | =helm-make=                    |
   | ~SPC c r~   | recompile                      |

** Modes
*** Major Mode leader key
Key bindings specific to the current =major mode= start with ~SPC m~. For
convenience a shortcut key called the major mode leader key is set by default on
~​,​~ which saves one precious keystroke.

It is possible to change the major mode leader key by defining the variable
=dotspacemacs-major-mode-leader-key= in your =~/.spacemacs=. For example to
setup the key on tabulation:

#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-major-mode-leader-key "<tab>")
#+END_SRC

*** Helm
Spacemacs add =hjkl= navigation to =helm= buffers:

    | Key Binding | Description                  |
    |-------------+------------------------------|
    | ~C-h~       | go to next source            |
    | ~C-H~       | describe key (replace ~C-h~) |
    | ~C-j~       | go to previous candidate     |
    | ~C-k~       | go to next candidate         |
    | ~C-l~       | same as ~return~             |

** Emacs Server
Spacemacs starts a server at launch. This server is killed whenever you close
your Emacs windows.

*** Connecting to the Emacs server
You can open a file in Emacs from the terminal using =emacsclient=. Use
=emacsclient -c= to open the file in Emacs GUI. Use =emacsclient -t= to open the
file in Emacs within the terminal.

If you want your Linux/OS X system to use Emacs by default for any prompt, you
need to set it in your shell configuration, e.g. =~/.bashrc= or =~/.zshrc=:

#+BEGIN_SRC sh-mode
export EDITOR="emacsclient -c"
#+END_SRC

Note that if you're on OS X, you may have to refer to the emacsclient that comes
with your GUI Emacs, e.g.:

#+BEGIN_SRC sh-mode
export EDITOR="/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -c"
#+END_SRC

Tip: Remember to use ~:wq~ or ~C-x #~ after you are done editing the file in
Emacs.

See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][Emacs as a Server]] in the official Emacs manual for more details.

** Keeping the server alive
It is possible to keep the server alive when you close Emacs by setting the
variable =dotspacemacs-persistent-server= to =t= in your =~./spacemacs=.

#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-persistent-server t)
#+END_SRC

When this variable is set to =t=, the only way to quit Emacs /and/ kill the
server is to use the following bindings:

| Keybinding | Description                                                              |
|------------+--------------------------------------------------------------------------|
| ~SPC q q~  | Quit Emacs and kill the server, prompt for changed buffers to save       |
| ~SPC q Q~  | Quit Emacs and kill the server, lose all unsaved changes.                |
| ~SPC q r~  | Restart both Emacs and the server, prompting to save any changed buffers |
| ~SPC q s~  | Save the buffers, quit Emacs and kill the server                         |
| ~SPC q z~  | Kill the current frame                                                   |

** Troubleshoot
*** Loading fails
If any errors happen during the loading the mode-line will turn red and the
errors should appear inline in the startup buffer. Spacemacs should still be
usable; if it is not then restart Emacs with =emacs --debug-init= and open a
[[https://github.com/syl20bnr/spacemacs/issues][Github issue]] with the backtrace.

*** Upgrading/Downgrading Emacs version
To ensure that packages are correctly compiled for the new Emacs version you
installed, be sure to run the interactive command =spacemacs/recompile-elpa=
with ~SPC SPC spacemacs/recompile-elpa~.

* Achievements
** Issues

| Achievements              | Account      |
|---------------------------+--------------|
| [[https://github.com/syl20bnr/spacemacs/pull/100][100th issue (PR)]]          | [[https://github.com/danielwuz][danielwuz]]    |
| [[https://github.com/syl20bnr/spacemacs/issues/200][200th issue (question)]]    | [[https://github.com/justrajdeep][justrajdeep]]  |
| [[https://github.com/syl20bnr/spacemacs/pull/300][300th issue (PR)]]          | [[https://github.com/danielwuz][danielwuz]]    |
| [[https://github.com/syl20bnr/spacemacs/pull/400][400th issue (PR)]]          | [[https://github.com/CestDiego][CestDiego]]    |
| [[https://github.com/syl20bnr/spacemacs/pull/500][500th issue (PR)]]          | [[https://github.com/bjarkevad][bjarkevad]]    |
| [[https://github.com/syl20bnr/spacemacs/pull/600][600th issue (PR)]]          | [[https://github.com/bjarkevad][bjarkevad]]    |
| [[https://github.com/syl20bnr/spacemacs/pull/700][700th issue (enhancement)]] | [[https://github.com/jcpetkovich][jcpetkovich]]  |
| [[https://github.com/syl20bnr/spacemacs/pull/800][800th issue (PR)]]          | [[https://github.com/laat][ryansroberts]] |
| [[https://github.com/syl20bnr/spacemacs/pull/900][900th issue (PR)]]          | [[https://github.com/jcpetkovich][jcpetkovich]]  |
| [[https://github.com/syl20bnr/spacemacs/pull/1000][1000th issue (PR)]]         | [[https://github.com/tuhdo][tuhdo]]        |
| [[https://github.com/syl20bnr/spacemacs/pull/2000][2000th issue (PR)]]         | [[https://github.com/IvanMalison][IvanMalison]]  |
| [[https://github.com/syl20bnr/spacemacs/pull/3000][3000th issue (issue)]]      | [[https://github.com/malchmih][malchmih]]     |
| [[https://github.com/syl20bnr/spacemacs/pull/4000][4000th issue (issue)]]      | [[https://github.com/icymist][icymist]]      |
| [[https://github.com/syl20bnr/spacemacs/pull/5000][5000th issue (issue)]]      | [[https://github.com/justbur][justbur]]      |
| [[https://github.com/syl20bnr/spacemacs/pull/6000][6000th issue (issue)]]      | [[https://github.com/d12frosted][d12frosted]]   |
| [[https://github.com/syl20bnr/spacemacs/pull/7000][7000th issue (issue)]]      | [[https://github.com/deb0ch][deb0ch]]       |

** Merged Pull Requests

| Achievements        | Account        |
|---------------------+----------------|
| [[https://github.com/syl20bnr/spacemacs/pull/228][100th pull request]]  | [[https://github.com/bru][bru]]            |
| [[https://github.com/syl20bnr/spacemacs/pull/418][200th pull request]]  | [[https://github.com/smt][smt]]            |
| [[https://github.com/syl20bnr/spacemacs/pull/617][300th pull request]]  | [[https://github.com/BrianHicks][BrianHicks]]     |
| [[https://github.com/syl20bnr/spacemacs/pull/806][400th pull request]]  | [[https://github.com/cpaulik][cpaulik]]        |
| [[https://github.com/syl20bnr/spacemacs/pull/993][500th pull request]]  | [[https://github.com/tuhdo][tuhdo]]          |
| [[https://github.com/syl20bnr/spacemacs/pull/1205][600th pull request]]  | [[https://github.com/trishume][trishume]]       |
| [[https://github.com/syl20bnr/spacemacs/pull/1995][1000th pull request]] | [[https://github.com/justbur][justbur]]        |
| [[https://github.com/syl20bnr/spacemacs/pull/4089][2000th pull request]] | [[https://github.com/channingwalton][channingwalton]] |
| [[https://github.com/syl20bnr/spacemacs/pull/6338][3000th pull request]] | [[https://github.com/darkfeline][darkfeline]]     |

** Stars, forks and watchers

| Achievements         | Account         |
|----------------------+-----------------|
| 100th watcher        | [[https://github.com/adouzzy][adouzzy]]         |
| 100th fork           | [[https://github.com/balajisivaraman][balajisivaraman]] |
| 200th fork           | [[https://github.com/alcol80][alcol80]]         |
| 300th fork           | [[https://github.com/mlopes][mlopes]]          |
| 2000th fork          | [[https://github.com/Gameguykiler][Gameguykiler]]    |
| 100th star           | [[https://github.com/Jackneill][Jackneill]]       |
| 200th star           | [[https://github.com/jb55][jb55]]            |
| 400th star           | [[https://github.com/dbohdan][dbohdan]]         |
| 600th star           | [[https://github.com/laat][laat]]            |
| 700th star           | [[https://github.com/kendall][kendall]]         |
| 800th star           | [[https://github.com/urso][urso]]            |
| 900th star           | [[https://github.com/luisgerhorst][luisgerhorst]]    |
| 1000th star!         | [[https://github.com/rashly][rashly]]          |
| 2000th star!!        | [[https://github.com/stshine][stshine]]         |
| 3000th star!!!       | [[https://github.com/TheBB][TheBB]]           |
| 4000th star!!!!      | [[https://github.com/nixmaniack][nixmaniack]]      |
| 5000th star!!!!!     | [[https://github.com/StreakyCobra][StreakyCobra]]    |
| 6000th star!!!!!!    | [[https://github.com/NJBS][NJBS]]            |
| 7000th star!!!!!!!   | [[https://github.com/mukhali][mukhali]]         |
| 8000th star!!!!!!!!  | [[https://github.com/shsteven][shsteven]]        |
| 9000th star!!!!!!!!! | [[https://github.com/deb0ch][deb0ch]]          |
| 10000th star :star:  | [[https://github.com/colt365][colt365]]         |

** Gitter chat

| Achievements                    | Account     |
|---------------------------------+-------------|
| First joiner on the Gitter Chat | [[https://github.com/trishume][trishume]]    |
| 1000th joiner                   | [[https://github.com/gabrielpoca][gabrielpoca]] |

** First times

| Achievements                    | Account      |
|---------------------------------+--------------|
| [[https://github.com/syl20bnr/spacemacs/pull/19][First contribution]]              | [[https://github.com/trishume][trishume]]     |
| [[https://github.com/syl20bnr/spacemacs/commit/e802027d75d0c0aed55539b0da2dfa0df94dfd39][First contribution layer]]        | [[https://github.com/trishume][trishume]]     |
| [[http://oli.me.uk/2014/11/06/spacemacs-emacs-vim/][First blog article on Spacemacs]] | [[https://github.com/Wolfy87][Wolfy87]]      |
| [[https://github.com/syl20bnr/spacemacs/commit/7b44a56263049482ed540ed6815a295633ffe9d1][First contributed banner]]        | [[https://github.com/chrisbarrett][chrisbarrett]] |

** Special Mentions

| Reason                                                              | Account         |
|---------------------------------------------------------------------+-----------------|
| Autumnal Cleanup 2015 ([[https://github.com/syl20bnr/spacemacs/wiki/Autumnal-Cleanup-2015][wiki]])                                        | [[https://github.com/StreakyCobra][StreakyCobra]]    |
| Test and debug tools                                                | [[https://github.com/justbur][justbur]]         |
| Integration of Ivy                                                  | [[https://github.com/justbur][justbur]]         |
| Transient States                                                    | [[https://github.com/justbur][justbur]]         |
| Integration of Persp-mode                                           | [[https://github.com/CestDiego][CestDiego]]       |
| Cleanest PR ([[https://github.com/syl20bnr/spacemacs/pull/5545][PR #5545]])                                              | [[https://github.com/JAremko][JAremko]]         |
| Documentation tools and GitHub support                              | [[https://github.com/JAremko][JAremko]]         |
| Code navigation improvement (jump handlers, generalized next error) | [[https://github.com/TheBB][TheBB]]           |
| Better support for GUI using an Emacs daemon (after-display macro)  | [[https://github.com/travisbhartwell][travisbhartwell]] |

** Special Titles

| Achievements                                    | Account      |
|-------------------------------------------------+--------------|
| The Gunner (18 PRs in a row)                    | [[https://github.com/ralesi][ralesi]]       |
| The Saint (unlocked the holy-mode)              | [[https://github.com/trishume][trishume]]     |
| The Artist ([[https://github.com/nashamri/spacemacs-logo][logo]] and [[https://github.com/nashamri/spacemacs-theme][theme]])                     | [[https://github.com/nashamri][nashamri]]     |
| The Meme Master (doge banner)                   | [[https://github.com/chrisbarrett][chrisbarrett]] |
| The Helm captain ([[http://tuhdo.github.io/helm-intro.html][helm guide]])                   | [[https://github.com/tuhdo][tuhdo]]        |
| The Master of the Keys ([[https://github.com/justbur/emacs-which-key][which-key]] and [[https://github.com/justbur/emacs-bind-map][bind-map]]) | [[https://github.com/justbur][justbur]]      |
| The PR Patrol Officer                           | [[https://github.com/robbyoconnor][robbyoconnor]] |
| The Expert in Latin Language ([[https://github.com/syl20bnr/spacemacs/pull/4043][PR]])               | [[https://github.com/vijaykiran][vijaykiran]]   |
| The Tiler ([[https://github.com/syl20bnr/spacemacs/pull/4068][eyebrowse integration]])               | [[https://github.com/bmag][bmag]]         |
| The Geometer ([[https://github.com/TheBB/spaceline][spaceline]])                        | [[https://github.com/TheBB][TheBB]]        |
| The Librarian (doc-fmt tool and space-doc mode) | [[https://github.com/JAremko][JAremko]]      |

* Thank you
Thank you Richard for this great piece of software.

Thank you to all the contributors and the whole Emacs community from core
developers to elisp hackers!
